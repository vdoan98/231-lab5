
lab5_2.elf:     file format elf32-littlenios2
lab5_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003bac memsz 0x00003bac flags r-x
    LOAD off    0x00004bcc vaddr 0x00003bcc paddr 0x00005614 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x0000705c vaddr 0x0000705c paddr 0x0000705c align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000039e8  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  00003b9c  00003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00003bcc  00005614  00004bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0000705c  0000705c  0000705c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000006b8  00000000  00000000  00006638  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000a5f  00000000  00000000  00006cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000e6a6  00000000  00000000  0000774f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000334c  00000000  00000000  00015df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008796  00000000  00000000  00019141  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b3c  00000000  00000000  000218d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f46  00000000  00000000  00022414  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000022a4  00000000  00000000  0002335a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00025600  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000138  00000000  00000000  00025650  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00027689  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002768c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0002768f  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00027690  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00027694  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00027698  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0002769c  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000276a5  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000276ae  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  000276b7  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000055  00000000  00000000  000276c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00003b9c l    d  .rodata	00000000 .rodata
00003bcc l    d  .rwdata	00000000 .rwdata
0000705c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 lab5_2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000006a4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00003bcc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000015c8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000055ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000043d4 l     O .rwdata	00001060 JTAG_UART
0000185c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00001a9c l     F .text	00000228 altera_avalon_jtag_uart_irq
00001cc4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00002340 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000027dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002858 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002938 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002d5c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00002e98 l     F .text	000000dc alt_file_locked
000030fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00003984 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00003b38 l     F .text	00000040 alt_sim_halt
00001634 g     F .text	0000006c alt_main
000070ac g     O .bss	00000100 alt_irq
00005614 g       *ABS*	00000000 __flash_rwdata_start
0000733c g       *ABS*	00000000 __alt_heap_start
000016c0 g     F .text	00000020 __malloc_unlock
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007068 g     O .bss	00000004 errno
00007070 g     O .bss	00000004 alt_argv
0000d5dc g       *ABS*	00000000 _gp
0000179c g     F .text	00000030 usleep
0000545c g     O .rwdata	00000180 alt_fd_list
00003380 g     F .text	00000094 alt_find_dev
0000373c g     F .text	000000a0 memcpy
00002e20 g     F .text	00000078 alt_io_redirect
00003b9c g       *ABS*	00000000 __DTOR_END__
00003360 g     F .text	00000020 altera_nios2_irq_init
00001edc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000007e0 g     F .text	00000008 __udivsi3
000035ec g     F .text	00000090 alt_icache_flush
0000705c g     O .bss	00000004 __malloc_top_pad
00001098 g     F .text	00000070 _sbrk_r
00005600 g     O .rwdata	00000004 alt_max_fd
00007060 g     O .bss	00000004 __malloc_max_sbrked_mem
000055e0 g     O .rwdata	00000004 _global_impure_ptr
0000733c g       *ABS*	00000000 __bss_end
00002c64 g     F .text	000000f8 alt_iic_isr_register
00003254 g     F .text	0000010c alt_tick
00002c1c g     F .text	00000048 alt_ic_irq_enabled
000031bc g     F .text	00000098 alt_alarm_stop
00007078 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00005434 g     O .rwdata	00000028 alt_dev_null
0000283c g     F .text	0000001c alt_dcache_flush_all
000007f0 g     F .text	0000001c calloc
00005614 g       *ABS*	00000000 __ram_rwdata_end
000055f8 g     O .rwdata	00000008 alt_dev_list
00003bcc g       *ABS*	00000000 __ram_rodata_end
000007e8 g     F .text	00000008 __umodsi3
0000733c g       *ABS*	00000000 end
000019dc g     F .text	000000c0 altera_avalon_jtag_uart_init
00003b98 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000023b0 g     F .text	00000090 alt_avalon_timer_sc_init
00002100 g     F .text	00000240 altera_avalon_jtag_uart_write
00001234 g     F .text	00000314 _free_r
00003988 g     F .text	000001b0 __call_exitprocs
000055e8 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
0000707c g     O .bss	00000004 _alt_tick_rate
00007080 g     O .bss	00000004 _alt_nticks
00001800 g     F .text	0000005c alt_sys_init
00003850 g     F .text	00000134 __register_exitproc
00001d74 g     F .text	00000074 altera_avalon_jtag_uart_close
00003bcc g       *ABS*	00000000 __ram_rwdata_start
00003b9c g       *ABS*	00000000 __ram_rodata_start
00007084 g     O .bss	00000028 __malloc_current_mallinfo
00001894 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00003534 g     F .text	000000b8 alt_get_fd
00002594 g     F .text	0000014c alt_busy_sleep
000036c8 g     F .text	00000074 memcmp
00001944 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000733c g       *ABS*	00000000 __alt_stack_base
0000198c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003fcc g     O .rwdata	00000408 __malloc_av_
00003414 g     F .text	00000120 alt_find_file
00002884 g     F .text	000000b4 alt_dev_llist_insert
000016a0 g     F .text	00000020 __malloc_lock
000016e0 g     F .text	000000bc sbrk
0000080c g     F .text	000000b4 _calloc_r
0000705c g       *ABS*	00000000 __bss_start
00001000 g     F .text	00000098 memset
000001f0 g     F .text	000002d0 main
00007074 g     O .bss	00000004 alt_envp
00007064 g     O .bss	00000004 __malloc_max_total_mem
000018ec g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000005c4 g     F .text	000000e0 toDigit
00800000 g       *ABS*	00000000 __alt_heap_limit
000071ac g     O .bss	00000190 _atexit0
000008c0 g     F .text	00000740 _malloc_r
00005604 g     O .rwdata	00000004 alt_errno
00000720 g     F .text	00000060 __divsi3
00001108 g     F .text	0000012c _malloc_trim_r
00003b9c g       *ABS*	00000000 __CTOR_END__
00003b9c g       *ABS*	00000000 __flash_rodata_start
00003b9c g       *ABS*	00000000 __DTOR_LIST__
000017cc g     F .text	00000034 alt_irq_init
0000315c g     F .text	00000060 alt_release_fd
0000367c g     F .text	00000014 atexit
000055dc g     O .rwdata	00000004 _impure_ptr
0000706c g     O .bss	00000004 alt_argc
000029fc g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000055f0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002a90 g     F .text	00000050 alt_ic_isr_register
00005614 g       *ABS*	00000000 _edata
0000733c g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00001de8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00002b7c g     F .text	000000a0 alt_ic_irq_disable
000055e4 g     O .rwdata	00000004 __malloc_trim_threshold
00003690 g     F .text	00000038 exit
00000780 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
00003b78 g     F .text	00000020 _exit
00002440 g     F .text	00000154 alt_alarm_start
000037dc g     F .text	00000074 strlen
00002f74 g     F .text	00000188 open
08000000 g       *ABS*	00000000 __alt_mem_SRAM
00002a60 g     F .text	00000030 alt_icache_flush_all
00005608 g     O .rwdata	00000004 alt_priority_mask
000004c0 g     F .text	00000104 HEX3to0_display
00002ae0 g     F .text	0000009c alt_ic_irq_enable
0000560c g     O .rwdata	00000008 alt_alarm_list
00002998 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
000026e0 g     F .text	000000fc close
00001548 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18dc2b04 	addi	r3,r3,28844
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18dc2b04 	addi	r3,r3,28844
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c0:	d6b57714 	ori	gp,gp,54748
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	109c1714 	ori	r2,r2,28764

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18dccf14 	ori	r3,r3,29500

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	00015480 	call	1548 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	00016340 	call	1634 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
int HEX3to0_display (int value, unsigned char * table);
int* toDigit(int value);


int main(void)
{
     1f0:	defff004 	addi	sp,sp,-64
     1f4:	dfc00f15 	stw	ra,60(sp)
     1f8:	df000e15 	stw	fp,56(sp)
     1fc:	df000e04 	addi	fp,sp,56
	 * instead of regular memory loads and stores)
	 */

	/********** Your declarations should go below! ***********/

	volatile int * green_LED_ptr	= (int *) 0x10000010;	// green LED address
     200:	00840034 	movhi	r2,4096
     204:	10800404 	addi	r2,r2,16
     208:	e0bff815 	stw	r2,-32(fp)
	volatile int * HEX3_HEX0_ptr	= (int *) 0x10000020;	// HEX3_HEX0 address
     20c:	00840034 	movhi	r2,4096
     210:	10800804 	addi	r2,r2,32
     214:	e0bff715 	stw	r2,-36(fp)
	volatile int * SW_switch_ptr	= (int *) 0x10000040;	// SW slider switch address
     218:	00840034 	movhi	r2,4096
     21c:	10801004 	addi	r2,r2,64
     220:	e0bff615 	stw	r2,-40(fp)
	volatile int * KEY_ptr			= (int *) 0x10000050;
     224:	00840034 	movhi	r2,4096
     228:	10801404 	addi	r2,r2,80
     22c:	e0bff515 	stw	r2,-44(fp)

	int HEX_bits = 0x0000000F;					// pattern for HEX displays
     230:	008003c4 	movi	r2,15
     234:	e0bff415 	stw	r2,-48(fp)

	// An array containing values to convert a single digit decimal to the corresponding
	// seven_segment value. The first three elements (table[0] to table[2]) are correct;
	// the rest are not. You need to complete the array below with all the correct conversion values.

	unsigned char table[10] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
     238:	00800fc4 	movi	r2,63
     23c:	e0bffa05 	stb	r2,-24(fp)
     240:	00800184 	movi	r2,6
     244:	e0bffa45 	stb	r2,-23(fp)
     248:	008016c4 	movi	r2,91
     24c:	e0bffa85 	stb	r2,-22(fp)
     250:	008013c4 	movi	r2,79
     254:	e0bffac5 	stb	r2,-21(fp)
     258:	00801984 	movi	r2,102
     25c:	e0bffb05 	stb	r2,-20(fp)
     260:	00801b44 	movi	r2,109
     264:	e0bffb45 	stb	r2,-19(fp)
     268:	00801f44 	movi	r2,125
     26c:	e0bffb85 	stb	r2,-18(fp)
     270:	008001c4 	movi	r2,7
     274:	e0bffbc5 	stb	r2,-17(fp)
     278:	00801fc4 	movi	r2,127
     27c:	e0bffc05 	stb	r2,-16(fp)
     280:	00801bc4 	movi	r2,111
     284:	e0bffc45 	stb	r2,-15(fp)
	//0x7D == 0111 1101 => 6
	//0x07 == 0000 0111 => 7
	//0x7F == 0111 1111 => 8
	//0x6F == 0110 1111 => 9

	unsigned char buttonTable[4] = {0x1, 0x2, 0x4, 0x8};
     288:	00800044 	movi	r2,1
     28c:	e0bffc85 	stb	r2,-14(fp)
     290:	00800084 	movi	r2,2
     294:	e0bffcc5 	stb	r2,-13(fp)
     298:	00800104 	movi	r2,4
     29c:	e0bffd05 	stb	r2,-12(fp)
     2a0:	00800204 	movi	r2,8
     2a4:	e0bffd45 	stb	r2,-11(fp)
	//KEY2 = 4 = 0x4
	//KEY3 = 8 = 0x8
	//KEY0 & KEY2 = 5
	//KEY2 & KEY 3 = 12

	unsigned char switchTable[10] = {0x001, 0x002, 0x004, 0x008, 0x010, 0x020, 0x040, 0x080, 0x100, 0x200};
     2a8:	00800044 	movi	r2,1
     2ac:	e0bffd85 	stb	r2,-10(fp)
     2b0:	00800084 	movi	r2,2
     2b4:	e0bffdc5 	stb	r2,-9(fp)
     2b8:	00800104 	movi	r2,4
     2bc:	e0bffe05 	stb	r2,-8(fp)
     2c0:	00800204 	movi	r2,8
     2c4:	e0bffe45 	stb	r2,-7(fp)
     2c8:	00800404 	movi	r2,16
     2cc:	e0bffe85 	stb	r2,-6(fp)
     2d0:	00800804 	movi	r2,32
     2d4:	e0bffec5 	stb	r2,-5(fp)
     2d8:	00801004 	movi	r2,64
     2dc:	e0bfff05 	stb	r2,-4(fp)
     2e0:	00bfe004 	movi	r2,-128
     2e4:	e0bfff45 	stb	r2,-3(fp)
     2e8:	e03fff85 	stb	zero,-2(fp)
     2ec:	e03fffc5 	stb	zero,-1(fp)
     2f0:	00000006 	br	2f4 <main+0x104>


	while(1)
	{
		//		HEX_bits = 01101111011011110110111101101111; //999
		HEX_bits = HEX3to0_display(999, table);
     2f4:	e17ffa04 	addi	r5,fp,-24
     2f8:	0100f9c4 	movi	r4,999
     2fc:	00004c00 	call	4c0 <HEX3to0_display>
     300:	e0bff415 	stw	r2,-48(fp)
		*(HEX3_HEX0_ptr) = HEX_bits;
     304:	e0fff717 	ldw	r3,-36(fp)
     308:	e0bff417 	ldw	r2,-48(fp)
     30c:	18800015 	stw	r2,0(r3)
		SW_value = *(SW_switch_ptr);		 	// read the SW slider switch values
     310:	e0bff617 	ldw	r2,-40(fp)
     314:	10800017 	ldw	r2,0(r2)
     318:	e0bff315 	stw	r2,-52(fp)
		*(green_LED_ptr) = SW_value; 			// light up the green LEDs
     31c:	e0fff817 	ldw	r3,-32(fp)
     320:	e0bff317 	ldw	r2,-52(fp)
     324:	18800015 	stw	r2,0(r3)

		KEY_value = *(KEY_ptr); 				// read the pushbutton KEY values
     328:	e0bff517 	ldw	r2,-44(fp)
     32c:	10800017 	ldw	r2,0(r2)
     330:	e0bff215 	stw	r2,-56(fp)

		//When you push KEY1, the seven-segment displays should change from 999 to 5 (not 05 or 005) and LEDG5
		//should also light up for as long as you keep pushing the button. Once you release the button, it should
		//continue to display 999 and the green LED would stop illuminating.

		if (KEY_value == 2)						// check if any KEY was pressed
     334:	e0bff217 	ldw	r2,-56(fp)
     338:	10800098 	cmpnei	r2,r2,2
     33c:	10001e1e 	bne	r2,zero,3b8 <main+0x1c8>
		{
			//HEX_bits = HEX3to0_display(5, table);
			*(green_LED_ptr) = 32;
     340:	e0fff817 	ldw	r3,-32(fp)
     344:	00800804 	movi	r2,32
     348:	18800015 	stw	r2,0(r3)
			while(KEY_value == 2){
     34c:	00001306 	br	39c <main+0x1ac>
				*(HEX3_HEX0_ptr) = HEX3to0_display(5, table);
     350:	e17ffa04 	addi	r5,fp,-24
     354:	01000144 	movi	r4,5
     358:	00004c00 	call	4c0 <HEX3to0_display>
     35c:	1007883a 	mov	r3,r2
     360:	e0bff717 	ldw	r2,-36(fp)
     364:	10c00015 	stw	r3,0(r2)

				if(!*(KEY_ptr)){
     368:	e0bff517 	ldw	r2,-44(fp)
     36c:	10800017 	ldw	r2,0(r2)
     370:	1004c03a 	cmpne	r2,r2,zero
     374:	1000021e 	bne	r2,zero,380 <main+0x190>
					*(green_LED_ptr) = 0;
     378:	e0bff817 	ldw	r2,-32(fp)
     37c:	10000015 	stw	zero,0(r2)
				}
				if(*(KEY_ptr)){
     380:	e0bff517 	ldw	r2,-44(fp)
     384:	10800017 	ldw	r2,0(r2)
     388:	1005003a 	cmpeq	r2,r2,zero
     38c:	1000031e 	bne	r2,zero,39c <main+0x1ac>
					KEY_value = *(KEY_ptr);
     390:	e0bff517 	ldw	r2,-44(fp)
     394:	10800017 	ldw	r2,0(r2)
     398:	e0bff215 	stw	r2,-56(fp)

		if (KEY_value == 2)						// check if any KEY was pressed
		{
			//HEX_bits = HEX3to0_display(5, table);
			*(green_LED_ptr) = 32;
			while(KEY_value == 2){
     39c:	e0bff217 	ldw	r2,-56(fp)
     3a0:	108000a0 	cmpeqi	r2,r2,2
     3a4:	103fea1e 	bne	r2,zero,350 <main+0x160>

			//					while (*KEY_ptr){
			//												// wait for pushbutton KEY release
			//					}
			// display pattern on HEX3 ... HEX0
			usleep(150000); //Delays program execution for the given number of microseconds.
     3a8:	010000b4 	movhi	r4,2
     3ac:	21127c04 	addi	r4,r4,18928
     3b0:	000179c0 	call	179c <usleep>
     3b4:	003fcf06 	br	2f4 <main+0x104>

		//When you push KEY2, the seven-segment displays should change from 999 to 10 (not 010) and LEDG6
		//should also light up for as long as you keep pushing the button. Once you release the button, it should
		//continue to display 999 and the green LED would stop illuminating.

		else if (KEY_value == 4){
     3b8:	e0bff217 	ldw	r2,-56(fp)
     3bc:	10800118 	cmpnei	r2,r2,4
     3c0:	10001e1e 	bne	r2,zero,43c <main+0x24c>
			//					}
			//					*(HEX3_HEX0_ptr) = HEX_bits;			// display pattern on HEX3 ... HEX0
			//					usleep(150000); //Delays program execution for the given number of microseconds.
			//					KEY_value = *(KEY_ptr);

			*(green_LED_ptr) = 64;
     3c4:	e0fff817 	ldw	r3,-32(fp)
     3c8:	00801004 	movi	r2,64
     3cc:	18800015 	stw	r2,0(r3)
			while(KEY_value == 4){
     3d0:	00001306 	br	420 <main+0x230>
				*(HEX3_HEX0_ptr) = HEX3to0_display(10, table);
     3d4:	e17ffa04 	addi	r5,fp,-24
     3d8:	01000284 	movi	r4,10
     3dc:	00004c00 	call	4c0 <HEX3to0_display>
     3e0:	1007883a 	mov	r3,r2
     3e4:	e0bff717 	ldw	r2,-36(fp)
     3e8:	10c00015 	stw	r3,0(r2)

				if(!*(KEY_ptr)){
     3ec:	e0bff517 	ldw	r2,-44(fp)
     3f0:	10800017 	ldw	r2,0(r2)
     3f4:	1004c03a 	cmpne	r2,r2,zero
     3f8:	1000021e 	bne	r2,zero,404 <main+0x214>
					*(green_LED_ptr) = 0;
     3fc:	e0bff817 	ldw	r2,-32(fp)
     400:	10000015 	stw	zero,0(r2)
				}
				if(*(KEY_ptr)){
     404:	e0bff517 	ldw	r2,-44(fp)
     408:	10800017 	ldw	r2,0(r2)
     40c:	1005003a 	cmpeq	r2,r2,zero
     410:	1000031e 	bne	r2,zero,420 <main+0x230>
					KEY_value = *(KEY_ptr);
     414:	e0bff517 	ldw	r2,-44(fp)
     418:	10800017 	ldw	r2,0(r2)
     41c:	e0bff215 	stw	r2,-56(fp)
			//					*(HEX3_HEX0_ptr) = HEX_bits;			// display pattern on HEX3 ... HEX0
			//					usleep(150000); //Delays program execution for the given number of microseconds.
			//					KEY_value = *(KEY_ptr);

			*(green_LED_ptr) = 64;
			while(KEY_value == 4){
     420:	e0bff217 	ldw	r2,-56(fp)
     424:	10800120 	cmpeqi	r2,r2,4
     428:	103fea1e 	bne	r2,zero,3d4 <main+0x1e4>

			//					while (*KEY_ptr){
			//												// wait for pushbutton KEY release
			//					}
			// display pattern on HEX3 ... HEX0
			usleep(150000); //Delays program execution for the given number of microseconds.
     42c:	010000b4 	movhi	r4,2
     430:	21127c04 	addi	r4,r4,18928
     434:	000179c0 	call	179c <usleep>
     438:	003fae06 	br	2f4 <main+0x104>
		}

		//When you push KEY3, the seven-segment displays should change from 999 to 25 (not 025) and LEDG7
		//should also light up for as long as you keep pushing the button. Once you release the button, it should
		//continue to display 999 and the green LED would stop illuminating.
		else if (KEY_value == 8){
     43c:	e0bff217 	ldw	r2,-56(fp)
     440:	10800218 	cmpnei	r2,r2,8
     444:	103fab1e 	bne	r2,zero,2f4 <main+0x104>
//				*(green_LED_ptr) = 128;
//			}
//			//usleep(150000); //Delays program execution for the given number of microseconds.
//			*(HEX3_HEX0_ptr) = HEX_bits;			// display pattern on HEX3 ... HEX0
//			KEY_value = *(KEY_ptr);
			*(green_LED_ptr) = 128;
     448:	e0fff817 	ldw	r3,-32(fp)
     44c:	00802004 	movi	r2,128
     450:	18800015 	stw	r2,0(r3)
			while(KEY_value == 8){
     454:	00001306 	br	4a4 <main+0x2b4>
				*(HEX3_HEX0_ptr) = HEX3to0_display(25, table);
     458:	e17ffa04 	addi	r5,fp,-24
     45c:	01000644 	movi	r4,25
     460:	00004c00 	call	4c0 <HEX3to0_display>
     464:	1007883a 	mov	r3,r2
     468:	e0bff717 	ldw	r2,-36(fp)
     46c:	10c00015 	stw	r3,0(r2)

				if(!*(KEY_ptr)){
     470:	e0bff517 	ldw	r2,-44(fp)
     474:	10800017 	ldw	r2,0(r2)
     478:	1004c03a 	cmpne	r2,r2,zero
     47c:	1000021e 	bne	r2,zero,488 <main+0x298>
					*(green_LED_ptr) = 0;
     480:	e0bff817 	ldw	r2,-32(fp)
     484:	10000015 	stw	zero,0(r2)
				}
				if(*(KEY_ptr)){
     488:	e0bff517 	ldw	r2,-44(fp)
     48c:	10800017 	ldw	r2,0(r2)
     490:	1005003a 	cmpeq	r2,r2,zero
     494:	1000031e 	bne	r2,zero,4a4 <main+0x2b4>
					KEY_value = *(KEY_ptr);
     498:	e0bff517 	ldw	r2,-44(fp)
     49c:	10800017 	ldw	r2,0(r2)
     4a0:	e0bff215 	stw	r2,-56(fp)
//			}
//			//usleep(150000); //Delays program execution for the given number of microseconds.
//			*(HEX3_HEX0_ptr) = HEX_bits;			// display pattern on HEX3 ... HEX0
//			KEY_value = *(KEY_ptr);
			*(green_LED_ptr) = 128;
			while(KEY_value == 8){
     4a4:	e0bff217 	ldw	r2,-56(fp)
     4a8:	10800220 	cmpeqi	r2,r2,8
     4ac:	103fea1e 	bne	r2,zero,458 <main+0x268>

			//					while (*KEY_ptr){
			//												// wait for pushbutton KEY release
			//					}
			// display pattern on HEX3 ... HEX0
			usleep(150000); //Delays program execution for the given number of microseconds.
     4b0:	010000b4 	movhi	r4,2
     4b4:	21127c04 	addi	r4,r4,18928
     4b8:	000179c0 	call	179c <usleep>

		//*(HEX3_HEX0_ptr) = HEX_bits;			// display pattern on HEX3 ... HEX0

		/* rotate the pattern shown on the HEX displays */

	}
     4bc:	003f8d06 	br	2f4 <main+0x104>

000004c0 <HEX3to0_display>:
 * to be displayed by the seven-segment displays and a character array that have the encoding
 * to display the provided value in decimal on the seven-segment displays. The provided value
 * can range from 0 - 999. The seven-segment displays must output the entire range correctly.
 */
int HEX3to0_display (int value, unsigned char * table)
{
     4c0:	defffa04 	addi	sp,sp,-24
     4c4:	dfc00515 	stw	ra,20(sp)
     4c8:	df000415 	stw	fp,16(sp)
     4cc:	df000404 	addi	fp,sp,16
     4d0:	e13ffe15 	stw	r4,-8(fp)
     4d4:	e17fff15 	stw	r5,-4(fp)
	int displayHex = 0; //0xffffff
     4d8:	e03ffd15 	stw	zero,-12(fp)
	int* digit = toDigit(value);
     4dc:	e13ffe17 	ldw	r4,-8(fp)
     4e0:	00005c40 	call	5c4 <toDigit>
     4e4:	e0bffc15 	stw	r2,-16(fp)
	displayHex = (((displayHex >> 24) | table[digit[0]] << 16) |((displayHex >> 16) |  table[digit[1]] << 24 >> 16) | (displayHex |  table[digit[2]])) ;
     4e8:	e0bffd17 	ldw	r2,-12(fp)
     4ec:	1009d63a 	srai	r4,r2,24
     4f0:	e0bffc17 	ldw	r2,-16(fp)
     4f4:	10800017 	ldw	r2,0(r2)
     4f8:	1007883a 	mov	r3,r2
     4fc:	e0bfff17 	ldw	r2,-4(fp)
     500:	1885883a 	add	r2,r3,r2
     504:	10800003 	ldbu	r2,0(r2)
     508:	10803fcc 	andi	r2,r2,255
     50c:	1004943a 	slli	r2,r2,16
     510:	2088b03a 	or	r4,r4,r2
     514:	e0bffd17 	ldw	r2,-12(fp)
     518:	100bd43a 	srai	r5,r2,16
     51c:	e0bffc17 	ldw	r2,-16(fp)
     520:	10800104 	addi	r2,r2,4
     524:	10800017 	ldw	r2,0(r2)
     528:	1007883a 	mov	r3,r2
     52c:	e0bfff17 	ldw	r2,-4(fp)
     530:	1885883a 	add	r2,r3,r2
     534:	10800003 	ldbu	r2,0(r2)
     538:	10803fcc 	andi	r2,r2,255
     53c:	1004963a 	slli	r2,r2,24
     540:	1005d43a 	srai	r2,r2,16
     544:	2884b03a 	or	r2,r5,r2
     548:	2088b03a 	or	r4,r4,r2
     54c:	e0bffc17 	ldw	r2,-16(fp)
     550:	10800204 	addi	r2,r2,8
     554:	10800017 	ldw	r2,0(r2)
     558:	1007883a 	mov	r3,r2
     55c:	e0bfff17 	ldw	r2,-4(fp)
     560:	1885883a 	add	r2,r3,r2
     564:	10800003 	ldbu	r2,0(r2)
     568:	10c03fcc 	andi	r3,r2,255
     56c:	e0bffd17 	ldw	r2,-12(fp)
     570:	1884b03a 	or	r2,r3,r2
     574:	2084b03a 	or	r2,r4,r2
     578:	e0bffd15 	stw	r2,-12(fp)
	//0x00FFFFFF
	if (value < 10){
     57c:	e0bffe17 	ldw	r2,-8(fp)
     580:	10800288 	cmpgei	r2,r2,10
     584:	1000031e 	bne	r2,zero,594 <HEX3to0_display+0xd4>
		displayHex = displayHex & 0x000000FF;
     588:	e0bffd17 	ldw	r2,-12(fp)
     58c:	10803fcc 	andi	r2,r2,255
     590:	e0bffd15 	stw	r2,-12(fp)
	}
	if (value < 100){
     594:	e0bffe17 	ldw	r2,-8(fp)
     598:	10801908 	cmpgei	r2,r2,100
     59c:	1000031e 	bne	r2,zero,5ac <HEX3to0_display+0xec>
		displayHex = displayHex & 0x0000FFFF;
     5a0:	e0bffd17 	ldw	r2,-12(fp)
     5a4:	10bfffcc 	andi	r2,r2,65535
     5a8:	e0bffd15 	stw	r2,-12(fp)
	}
	return displayHex;
     5ac:	e0bffd17 	ldw	r2,-12(fp)
}
     5b0:	e037883a 	mov	sp,fp
     5b4:	dfc00117 	ldw	ra,4(sp)
     5b8:	df000017 	ldw	fp,0(sp)
     5bc:	dec00204 	addi	sp,sp,8
     5c0:	f800283a 	ret

000005c4 <toDigit>:


int* toDigit(int value){
     5c4:	defffa04 	addi	sp,sp,-24
     5c8:	dfc00515 	stw	ra,20(sp)
     5cc:	df000415 	stw	fp,16(sp)
     5d0:	dc000315 	stw	r16,12(sp)
     5d4:	df000304 	addi	fp,sp,12
     5d8:	e13fff15 	stw	r4,-4(fp)
	int* digit;
	digit = (int*) calloc(3,sizeof(int));
     5dc:	010000c4 	movi	r4,3
     5e0:	01400104 	movi	r5,4
     5e4:	00007f00 	call	7f0 <calloc>
     5e8:	e0bffe15 	stw	r2,-8(fp)
	int i;
	for(i = 2; i >= 0; i--){
     5ec:	00800084 	movi	r2,2
     5f0:	e0bffd15 	stw	r2,-12(fp)
     5f4:	00000a06 	br	620 <toDigit+0x5c>
		digit[i] = 0;
     5f8:	e0bffd17 	ldw	r2,-12(fp)
     5fc:	1085883a 	add	r2,r2,r2
     600:	1085883a 	add	r2,r2,r2
     604:	1007883a 	mov	r3,r2
     608:	e0bffe17 	ldw	r2,-8(fp)
     60c:	1885883a 	add	r2,r3,r2
     610:	10000015 	stw	zero,0(r2)

int* toDigit(int value){
	int* digit;
	digit = (int*) calloc(3,sizeof(int));
	int i;
	for(i = 2; i >= 0; i--){
     614:	e0bffd17 	ldw	r2,-12(fp)
     618:	10bfffc4 	addi	r2,r2,-1
     61c:	e0bffd15 	stw	r2,-12(fp)
     620:	e0bffd17 	ldw	r2,-12(fp)
     624:	1004403a 	cmpge	r2,r2,zero
     628:	103ff31e 	bne	r2,zero,5f8 <toDigit+0x34>
		digit[i] = 0;
	}
	i = 2;
     62c:	00800084 	movi	r2,2
     630:	e0bffd15 	stw	r2,-12(fp)
	while (value > 0){
     634:	00001106 	br	67c <toDigit+0xb8>
		digit[i] = value % 10;
     638:	e0bffd17 	ldw	r2,-12(fp)
     63c:	1085883a 	add	r2,r2,r2
     640:	1085883a 	add	r2,r2,r2
     644:	1007883a 	mov	r3,r2
     648:	e0bffe17 	ldw	r2,-8(fp)
     64c:	18a1883a 	add	r16,r3,r2
     650:	e13fff17 	ldw	r4,-4(fp)
     654:	01400284 	movi	r5,10
     658:	00007800 	call	780 <__modsi3>
     65c:	80800015 	stw	r2,0(r16)
		value = value /  10;
     660:	e13fff17 	ldw	r4,-4(fp)
     664:	01400284 	movi	r5,10
     668:	00007200 	call	720 <__divsi3>
     66c:	e0bfff15 	stw	r2,-4(fp)
		i--;
     670:	e0bffd17 	ldw	r2,-12(fp)
     674:	10bfffc4 	addi	r2,r2,-1
     678:	e0bffd15 	stw	r2,-12(fp)
	int i;
	for(i = 2; i >= 0; i--){
		digit[i] = 0;
	}
	i = 2;
	while (value > 0){
     67c:	e0bfff17 	ldw	r2,-4(fp)
     680:	10800048 	cmpgei	r2,r2,1
     684:	103fec1e 	bne	r2,zero,638 <toDigit+0x74>
		digit[i] = value % 10;
		value = value /  10;
		i--;
	}

	return digit;
     688:	e0bffe17 	ldw	r2,-8(fp)

}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00217 	ldw	ra,8(sp)
     694:	df000117 	ldw	fp,4(sp)
     698:	dc000017 	ldw	r16,0(sp)
     69c:	dec00304 	addi	sp,sp,12
     6a0:	f800283a 	ret

000006a4 <udivmodsi4>:
     6a4:	29001b2e 	bgeu	r5,r4,714 <udivmodsi4+0x70>
     6a8:	28001a16 	blt	r5,zero,714 <udivmodsi4+0x70>
     6ac:	00800044 	movi	r2,1
     6b0:	0007883a 	mov	r3,zero
     6b4:	01c007c4 	movi	r7,31
     6b8:	00000306 	br	6c8 <udivmodsi4+0x24>
     6bc:	19c01326 	beq	r3,r7,70c <udivmodsi4+0x68>
     6c0:	18c00044 	addi	r3,r3,1
     6c4:	28000416 	blt	r5,zero,6d8 <udivmodsi4+0x34>
     6c8:	294b883a 	add	r5,r5,r5
     6cc:	1085883a 	add	r2,r2,r2
     6d0:	293ffa36 	bltu	r5,r4,6bc <udivmodsi4+0x18>
     6d4:	10000d26 	beq	r2,zero,70c <udivmodsi4+0x68>
     6d8:	0007883a 	mov	r3,zero
     6dc:	21400236 	bltu	r4,r5,6e8 <udivmodsi4+0x44>
     6e0:	2149c83a 	sub	r4,r4,r5
     6e4:	1886b03a 	or	r3,r3,r2
     6e8:	1004d07a 	srli	r2,r2,1
     6ec:	280ad07a 	srli	r5,r5,1
     6f0:	103ffa1e 	bne	r2,zero,6dc <udivmodsi4+0x38>
     6f4:	30000226 	beq	r6,zero,700 <udivmodsi4+0x5c>
     6f8:	2005883a 	mov	r2,r4
     6fc:	f800283a 	ret
     700:	1809883a 	mov	r4,r3
     704:	2005883a 	mov	r2,r4
     708:	f800283a 	ret
     70c:	0007883a 	mov	r3,zero
     710:	003ff806 	br	6f4 <udivmodsi4+0x50>
     714:	00800044 	movi	r2,1
     718:	0007883a 	mov	r3,zero
     71c:	003fef06 	br	6dc <udivmodsi4+0x38>

00000720 <__divsi3>:
     720:	defffe04 	addi	sp,sp,-8
     724:	dc000015 	stw	r16,0(sp)
     728:	dfc00115 	stw	ra,4(sp)
     72c:	0021883a 	mov	r16,zero
     730:	20000c16 	blt	r4,zero,764 <__divsi3+0x44>
     734:	000d883a 	mov	r6,zero
     738:	28000e16 	blt	r5,zero,774 <__divsi3+0x54>
     73c:	00006a40 	call	6a4 <udivmodsi4>
     740:	1007883a 	mov	r3,r2
     744:	8005003a 	cmpeq	r2,r16,zero
     748:	1000011e 	bne	r2,zero,750 <__divsi3+0x30>
     74c:	00c7c83a 	sub	r3,zero,r3
     750:	1805883a 	mov	r2,r3
     754:	dfc00117 	ldw	ra,4(sp)
     758:	dc000017 	ldw	r16,0(sp)
     75c:	dec00204 	addi	sp,sp,8
     760:	f800283a 	ret
     764:	0109c83a 	sub	r4,zero,r4
     768:	04000044 	movi	r16,1
     76c:	000d883a 	mov	r6,zero
     770:	283ff20e 	bge	r5,zero,73c <__divsi3+0x1c>
     774:	014bc83a 	sub	r5,zero,r5
     778:	8021003a 	cmpeq	r16,r16,zero
     77c:	003fef06 	br	73c <__divsi3+0x1c>

00000780 <__modsi3>:
     780:	deffff04 	addi	sp,sp,-4
     784:	dfc00015 	stw	ra,0(sp)
     788:	01800044 	movi	r6,1
     78c:	2807883a 	mov	r3,r5
     790:	20000416 	blt	r4,zero,7a4 <__modsi3+0x24>
     794:	28000c16 	blt	r5,zero,7c8 <__modsi3+0x48>
     798:	dfc00017 	ldw	ra,0(sp)
     79c:	dec00104 	addi	sp,sp,4
     7a0:	00006a41 	jmpi	6a4 <udivmodsi4>
     7a4:	0109c83a 	sub	r4,zero,r4
     7a8:	28000b16 	blt	r5,zero,7d8 <__modsi3+0x58>
     7ac:	180b883a 	mov	r5,r3
     7b0:	01800044 	movi	r6,1
     7b4:	00006a40 	call	6a4 <udivmodsi4>
     7b8:	0085c83a 	sub	r2,zero,r2
     7bc:	dfc00017 	ldw	ra,0(sp)
     7c0:	dec00104 	addi	sp,sp,4
     7c4:	f800283a 	ret
     7c8:	014bc83a 	sub	r5,zero,r5
     7cc:	dfc00017 	ldw	ra,0(sp)
     7d0:	dec00104 	addi	sp,sp,4
     7d4:	00006a41 	jmpi	6a4 <udivmodsi4>
     7d8:	0147c83a 	sub	r3,zero,r5
     7dc:	003ff306 	br	7ac <__modsi3+0x2c>

000007e0 <__udivsi3>:
     7e0:	000d883a 	mov	r6,zero
     7e4:	00006a41 	jmpi	6a4 <udivmodsi4>

000007e8 <__umodsi3>:
     7e8:	01800044 	movi	r6,1
     7ec:	00006a41 	jmpi	6a4 <udivmodsi4>

000007f0 <calloc>:
     7f0:	01800034 	movhi	r6,0
     7f4:	31957704 	addi	r6,r6,21980
     7f8:	2007883a 	mov	r3,r4
     7fc:	31000017 	ldw	r4,0(r6)
     800:	280d883a 	mov	r6,r5
     804:	180b883a 	mov	r5,r3
     808:	000080c1 	jmpi	80c <_calloc_r>

0000080c <_calloc_r>:
     80c:	298b383a 	mul	r5,r5,r6
     810:	defffe04 	addi	sp,sp,-8
     814:	dc000015 	stw	r16,0(sp)
     818:	dfc00115 	stw	ra,4(sp)
     81c:	00008c00 	call	8c0 <_malloc_r>
     820:	1021883a 	mov	r16,r2
     824:	01c00904 	movi	r7,36
     828:	10000d26 	beq	r2,zero,860 <_calloc_r+0x54>
     82c:	10ffff17 	ldw	r3,-4(r2)
     830:	1009883a 	mov	r4,r2
     834:	00bfff04 	movi	r2,-4
     838:	1886703a 	and	r3,r3,r2
     83c:	1887883a 	add	r3,r3,r2
     840:	180d883a 	mov	r6,r3
     844:	000b883a 	mov	r5,zero
     848:	38c01736 	bltu	r7,r3,8a8 <_calloc_r+0x9c>
     84c:	008004c4 	movi	r2,19
     850:	10c00836 	bltu	r2,r3,874 <_calloc_r+0x68>
     854:	20000215 	stw	zero,8(r4)
     858:	20000015 	stw	zero,0(r4)
     85c:	20000115 	stw	zero,4(r4)
     860:	8005883a 	mov	r2,r16
     864:	dfc00117 	ldw	ra,4(sp)
     868:	dc000017 	ldw	r16,0(sp)
     86c:	dec00204 	addi	sp,sp,8
     870:	f800283a 	ret
     874:	008006c4 	movi	r2,27
     878:	80000015 	stw	zero,0(r16)
     87c:	80000115 	stw	zero,4(r16)
     880:	81000204 	addi	r4,r16,8
     884:	10fff32e 	bgeu	r2,r3,854 <_calloc_r+0x48>
     888:	80000215 	stw	zero,8(r16)
     88c:	80000315 	stw	zero,12(r16)
     890:	81000404 	addi	r4,r16,16
     894:	19ffef1e 	bne	r3,r7,854 <_calloc_r+0x48>
     898:	81000604 	addi	r4,r16,24
     89c:	80000415 	stw	zero,16(r16)
     8a0:	80000515 	stw	zero,20(r16)
     8a4:	003feb06 	br	854 <_calloc_r+0x48>
     8a8:	00010000 	call	1000 <memset>
     8ac:	8005883a 	mov	r2,r16
     8b0:	dfc00117 	ldw	ra,4(sp)
     8b4:	dc000017 	ldw	r16,0(sp)
     8b8:	dec00204 	addi	sp,sp,8
     8bc:	f800283a 	ret

000008c0 <_malloc_r>:
     8c0:	defff604 	addi	sp,sp,-40
     8c4:	28c002c4 	addi	r3,r5,11
     8c8:	00800584 	movi	r2,22
     8cc:	dc800215 	stw	r18,8(sp)
     8d0:	dfc00915 	stw	ra,36(sp)
     8d4:	df000815 	stw	fp,32(sp)
     8d8:	ddc00715 	stw	r23,28(sp)
     8dc:	dd800615 	stw	r22,24(sp)
     8e0:	dd400515 	stw	r21,20(sp)
     8e4:	dd000415 	stw	r20,16(sp)
     8e8:	dcc00315 	stw	r19,12(sp)
     8ec:	dc400115 	stw	r17,4(sp)
     8f0:	dc000015 	stw	r16,0(sp)
     8f4:	2025883a 	mov	r18,r4
     8f8:	10c01236 	bltu	r2,r3,944 <_malloc_r+0x84>
     8fc:	04400404 	movi	r17,16
     900:	8940142e 	bgeu	r17,r5,954 <_malloc_r+0x94>
     904:	00800304 	movi	r2,12
     908:	0007883a 	mov	r3,zero
     90c:	90800015 	stw	r2,0(r18)
     910:	1805883a 	mov	r2,r3
     914:	dfc00917 	ldw	ra,36(sp)
     918:	df000817 	ldw	fp,32(sp)
     91c:	ddc00717 	ldw	r23,28(sp)
     920:	dd800617 	ldw	r22,24(sp)
     924:	dd400517 	ldw	r21,20(sp)
     928:	dd000417 	ldw	r20,16(sp)
     92c:	dcc00317 	ldw	r19,12(sp)
     930:	dc800217 	ldw	r18,8(sp)
     934:	dc400117 	ldw	r17,4(sp)
     938:	dc000017 	ldw	r16,0(sp)
     93c:	dec00a04 	addi	sp,sp,40
     940:	f800283a 	ret
     944:	00bffe04 	movi	r2,-8
     948:	18a2703a 	and	r17,r3,r2
     94c:	883fed16 	blt	r17,zero,904 <_malloc_r+0x44>
     950:	897fec36 	bltu	r17,r5,904 <_malloc_r+0x44>
     954:	9009883a 	mov	r4,r18
     958:	00016a00 	call	16a0 <__malloc_lock>
     95c:	00807dc4 	movi	r2,503
     960:	14402b2e 	bgeu	r2,r17,a10 <_malloc_r+0x150>
     964:	8806d27a 	srli	r3,r17,9
     968:	18003f1e 	bne	r3,zero,a68 <_malloc_r+0x1a8>
     96c:	880cd0fa 	srli	r6,r17,3
     970:	300490fa 	slli	r2,r6,3
     974:	02c00034 	movhi	r11,0
     978:	5acff304 	addi	r11,r11,16332
     97c:	12cb883a 	add	r5,r2,r11
     980:	2c000317 	ldw	r16,12(r5)
     984:	580f883a 	mov	r7,r11
     988:	2c00041e 	bne	r5,r16,99c <_malloc_r+0xdc>
     98c:	00000a06 	br	9b8 <_malloc_r+0xf8>
     990:	1800860e 	bge	r3,zero,bac <_malloc_r+0x2ec>
     994:	84000317 	ldw	r16,12(r16)
     998:	2c000726 	beq	r5,r16,9b8 <_malloc_r+0xf8>
     99c:	80800117 	ldw	r2,4(r16)
     9a0:	00ffff04 	movi	r3,-4
     9a4:	10c8703a 	and	r4,r2,r3
     9a8:	2447c83a 	sub	r3,r4,r17
     9ac:	008003c4 	movi	r2,15
     9b0:	10fff70e 	bge	r2,r3,990 <_malloc_r+0xd0>
     9b4:	31bfffc4 	addi	r6,r6,-1
     9b8:	32400044 	addi	r9,r6,1
     9bc:	02800034 	movhi	r10,0
     9c0:	528ff504 	addi	r10,r10,16340
     9c4:	54000217 	ldw	r16,8(r10)
     9c8:	8280a026 	beq	r16,r10,c4c <_malloc_r+0x38c>
     9cc:	80800117 	ldw	r2,4(r16)
     9d0:	00ffff04 	movi	r3,-4
     9d4:	10ca703a 	and	r5,r2,r3
     9d8:	2c4dc83a 	sub	r6,r5,r17
     9dc:	008003c4 	movi	r2,15
     9e0:	11808316 	blt	r2,r6,bf0 <_malloc_r+0x330>
     9e4:	52800315 	stw	r10,12(r10)
     9e8:	52800215 	stw	r10,8(r10)
     9ec:	30002916 	blt	r6,zero,a94 <_malloc_r+0x1d4>
     9f0:	8147883a 	add	r3,r16,r5
     9f4:	18800117 	ldw	r2,4(r3)
     9f8:	9009883a 	mov	r4,r18
     9fc:	10800054 	ori	r2,r2,1
     a00:	18800115 	stw	r2,4(r3)
     a04:	00016c00 	call	16c0 <__malloc_unlock>
     a08:	80c00204 	addi	r3,r16,8
     a0c:	003fc006 	br	910 <_malloc_r+0x50>
     a10:	02c00034 	movhi	r11,0
     a14:	5acff304 	addi	r11,r11,16332
     a18:	8ac5883a 	add	r2,r17,r11
     a1c:	14000317 	ldw	r16,12(r2)
     a20:	580f883a 	mov	r7,r11
     a24:	8806d0fa 	srli	r3,r17,3
     a28:	14006c26 	beq	r2,r16,bdc <_malloc_r+0x31c>
     a2c:	80c00117 	ldw	r3,4(r16)
     a30:	00bfff04 	movi	r2,-4
     a34:	81800317 	ldw	r6,12(r16)
     a38:	1886703a 	and	r3,r3,r2
     a3c:	80c7883a 	add	r3,r16,r3
     a40:	18800117 	ldw	r2,4(r3)
     a44:	81400217 	ldw	r5,8(r16)
     a48:	9009883a 	mov	r4,r18
     a4c:	10800054 	ori	r2,r2,1
     a50:	18800115 	stw	r2,4(r3)
     a54:	31400215 	stw	r5,8(r6)
     a58:	29800315 	stw	r6,12(r5)
     a5c:	00016c00 	call	16c0 <__malloc_unlock>
     a60:	80c00204 	addi	r3,r16,8
     a64:	003faa06 	br	910 <_malloc_r+0x50>
     a68:	00800104 	movi	r2,4
     a6c:	10c0052e 	bgeu	r2,r3,a84 <_malloc_r+0x1c4>
     a70:	00800504 	movi	r2,20
     a74:	10c07836 	bltu	r2,r3,c58 <_malloc_r+0x398>
     a78:	198016c4 	addi	r6,r3,91
     a7c:	300490fa 	slli	r2,r6,3
     a80:	003fbc06 	br	974 <_malloc_r+0xb4>
     a84:	8804d1ba 	srli	r2,r17,6
     a88:	11800e04 	addi	r6,r2,56
     a8c:	300490fa 	slli	r2,r6,3
     a90:	003fb806 	br	974 <_malloc_r+0xb4>
     a94:	00807fc4 	movi	r2,511
     a98:	1140bb36 	bltu	r2,r5,d88 <_malloc_r+0x4c8>
     a9c:	2806d0fa 	srli	r3,r5,3
     aa0:	573ffe04 	addi	fp,r10,-8
     aa4:	00800044 	movi	r2,1
     aa8:	180890fa 	slli	r4,r3,3
     aac:	1807d0ba 	srai	r3,r3,2
     ab0:	e1c00117 	ldw	r7,4(fp)
     ab4:	5909883a 	add	r4,r11,r4
     ab8:	21400217 	ldw	r5,8(r4)
     abc:	10c4983a 	sll	r2,r2,r3
     ac0:	81000315 	stw	r4,12(r16)
     ac4:	81400215 	stw	r5,8(r16)
     ac8:	388eb03a 	or	r7,r7,r2
     acc:	2c000315 	stw	r16,12(r5)
     ad0:	24000215 	stw	r16,8(r4)
     ad4:	e1c00115 	stw	r7,4(fp)
     ad8:	4807883a 	mov	r3,r9
     adc:	4800cd16 	blt	r9,zero,e14 <_malloc_r+0x554>
     ae0:	1807d0ba 	srai	r3,r3,2
     ae4:	00800044 	movi	r2,1
     ae8:	10c8983a 	sll	r4,r2,r3
     aec:	39004436 	bltu	r7,r4,c00 <_malloc_r+0x340>
     af0:	21c4703a 	and	r2,r4,r7
     af4:	10000a1e 	bne	r2,zero,b20 <_malloc_r+0x260>
     af8:	2109883a 	add	r4,r4,r4
     afc:	00bfff04 	movi	r2,-4
     b00:	4884703a 	and	r2,r9,r2
     b04:	3906703a 	and	r3,r7,r4
     b08:	12400104 	addi	r9,r2,4
     b0c:	1800041e 	bne	r3,zero,b20 <_malloc_r+0x260>
     b10:	2109883a 	add	r4,r4,r4
     b14:	3904703a 	and	r2,r7,r4
     b18:	4a400104 	addi	r9,r9,4
     b1c:	103ffc26 	beq	r2,zero,b10 <_malloc_r+0x250>
     b20:	480490fa 	slli	r2,r9,3
     b24:	4819883a 	mov	r12,r9
     b28:	023fff04 	movi	r8,-4
     b2c:	589b883a 	add	r13,r11,r2
     b30:	6807883a 	mov	r3,r13
     b34:	014003c4 	movi	r5,15
     b38:	1c000317 	ldw	r16,12(r3)
     b3c:	1c00041e 	bne	r3,r16,b50 <_malloc_r+0x290>
     b40:	0000a706 	br	de0 <_malloc_r+0x520>
     b44:	3000ab0e 	bge	r6,zero,df4 <_malloc_r+0x534>
     b48:	84000317 	ldw	r16,12(r16)
     b4c:	1c00a426 	beq	r3,r16,de0 <_malloc_r+0x520>
     b50:	80800117 	ldw	r2,4(r16)
     b54:	1204703a 	and	r2,r2,r8
     b58:	144dc83a 	sub	r6,r2,r17
     b5c:	29bff90e 	bge	r5,r6,b44 <_malloc_r+0x284>
     b60:	81000317 	ldw	r4,12(r16)
     b64:	80c00217 	ldw	r3,8(r16)
     b68:	89400054 	ori	r5,r17,1
     b6c:	8445883a 	add	r2,r16,r17
     b70:	20c00215 	stw	r3,8(r4)
     b74:	19000315 	stw	r4,12(r3)
     b78:	81400115 	stw	r5,4(r16)
     b7c:	1187883a 	add	r3,r2,r6
     b80:	31000054 	ori	r4,r6,1
     b84:	50800315 	stw	r2,12(r10)
     b88:	50800215 	stw	r2,8(r10)
     b8c:	19800015 	stw	r6,0(r3)
     b90:	11000115 	stw	r4,4(r2)
     b94:	12800215 	stw	r10,8(r2)
     b98:	12800315 	stw	r10,12(r2)
     b9c:	9009883a 	mov	r4,r18
     ba0:	00016c00 	call	16c0 <__malloc_unlock>
     ba4:	80c00204 	addi	r3,r16,8
     ba8:	003f5906 	br	910 <_malloc_r+0x50>
     bac:	8109883a 	add	r4,r16,r4
     bb0:	20800117 	ldw	r2,4(r4)
     bb4:	80c00217 	ldw	r3,8(r16)
     bb8:	81400317 	ldw	r5,12(r16)
     bbc:	10800054 	ori	r2,r2,1
     bc0:	20800115 	stw	r2,4(r4)
     bc4:	28c00215 	stw	r3,8(r5)
     bc8:	19400315 	stw	r5,12(r3)
     bcc:	9009883a 	mov	r4,r18
     bd0:	00016c00 	call	16c0 <__malloc_unlock>
     bd4:	80c00204 	addi	r3,r16,8
     bd8:	003f4d06 	br	910 <_malloc_r+0x50>
     bdc:	80800204 	addi	r2,r16,8
     be0:	14000317 	ldw	r16,12(r2)
     be4:	143f911e 	bne	r2,r16,a2c <_malloc_r+0x16c>
     be8:	1a400084 	addi	r9,r3,2
     bec:	003f7306 	br	9bc <_malloc_r+0xfc>
     bf0:	88c00054 	ori	r3,r17,1
     bf4:	8445883a 	add	r2,r16,r17
     bf8:	80c00115 	stw	r3,4(r16)
     bfc:	003fdf06 	br	b7c <_malloc_r+0x2bc>
     c00:	e4000217 	ldw	r16,8(fp)
     c04:	00bfff04 	movi	r2,-4
     c08:	80c00117 	ldw	r3,4(r16)
     c0c:	802d883a 	mov	r22,r16
     c10:	18aa703a 	and	r21,r3,r2
     c14:	ac401636 	bltu	r21,r17,c70 <_malloc_r+0x3b0>
     c18:	ac49c83a 	sub	r4,r21,r17
     c1c:	008003c4 	movi	r2,15
     c20:	1100130e 	bge	r2,r4,c70 <_malloc_r+0x3b0>
     c24:	88800054 	ori	r2,r17,1
     c28:	8447883a 	add	r3,r16,r17
     c2c:	80800115 	stw	r2,4(r16)
     c30:	20800054 	ori	r2,r4,1
     c34:	18800115 	stw	r2,4(r3)
     c38:	e0c00215 	stw	r3,8(fp)
     c3c:	9009883a 	mov	r4,r18
     c40:	00016c00 	call	16c0 <__malloc_unlock>
     c44:	80c00204 	addi	r3,r16,8
     c48:	003f3106 	br	910 <_malloc_r+0x50>
     c4c:	39c00117 	ldw	r7,4(r7)
     c50:	573ffe04 	addi	fp,r10,-8
     c54:	003fa006 	br	ad8 <_malloc_r+0x218>
     c58:	00801504 	movi	r2,84
     c5c:	10c06736 	bltu	r2,r3,dfc <_malloc_r+0x53c>
     c60:	8804d33a 	srli	r2,r17,12
     c64:	11801b84 	addi	r6,r2,110
     c68:	300490fa 	slli	r2,r6,3
     c6c:	003f4106 	br	974 <_malloc_r+0xb4>
     c70:	d0a6a017 	ldw	r2,-25984(gp)
     c74:	d0e00317 	ldw	r3,-32756(gp)
     c78:	053fffc4 	movi	r20,-1
     c7c:	10800404 	addi	r2,r2,16
     c80:	88a7883a 	add	r19,r17,r2
     c84:	1d000326 	beq	r3,r20,c94 <_malloc_r+0x3d4>
     c88:	98c3ffc4 	addi	r3,r19,4095
     c8c:	00bc0004 	movi	r2,-4096
     c90:	18a6703a 	and	r19,r3,r2
     c94:	9009883a 	mov	r4,r18
     c98:	980b883a 	mov	r5,r19
     c9c:	00010980 	call	1098 <_sbrk_r>
     ca0:	1009883a 	mov	r4,r2
     ca4:	15000426 	beq	r2,r20,cb8 <_malloc_r+0x3f8>
     ca8:	854b883a 	add	r5,r16,r21
     cac:	1029883a 	mov	r20,r2
     cb0:	11405a2e 	bgeu	r2,r5,e1c <_malloc_r+0x55c>
     cb4:	87000c26 	beq	r16,fp,ce8 <_malloc_r+0x428>
     cb8:	e4000217 	ldw	r16,8(fp)
     cbc:	80c00117 	ldw	r3,4(r16)
     cc0:	00bfff04 	movi	r2,-4
     cc4:	1884703a 	and	r2,r3,r2
     cc8:	14400336 	bltu	r2,r17,cd8 <_malloc_r+0x418>
     ccc:	1449c83a 	sub	r4,r2,r17
     cd0:	008003c4 	movi	r2,15
     cd4:	113fd316 	blt	r2,r4,c24 <_malloc_r+0x364>
     cd8:	9009883a 	mov	r4,r18
     cdc:	00016c00 	call	16c0 <__malloc_unlock>
     ce0:	0007883a 	mov	r3,zero
     ce4:	003f0a06 	br	910 <_malloc_r+0x50>
     ce8:	05c00034 	movhi	r23,0
     cec:	bddc2104 	addi	r23,r23,28804
     cf0:	b8800017 	ldw	r2,0(r23)
     cf4:	988d883a 	add	r6,r19,r2
     cf8:	b9800015 	stw	r6,0(r23)
     cfc:	d0e00317 	ldw	r3,-32756(gp)
     d00:	00bfffc4 	movi	r2,-1
     d04:	18808e26 	beq	r3,r2,f40 <_malloc_r+0x680>
     d08:	2145c83a 	sub	r2,r4,r5
     d0c:	3085883a 	add	r2,r6,r2
     d10:	b8800015 	stw	r2,0(r23)
     d14:	20c001cc 	andi	r3,r4,7
     d18:	18005f1e 	bne	r3,zero,e98 <_malloc_r+0x5d8>
     d1c:	000b883a 	mov	r5,zero
     d20:	a4c5883a 	add	r2,r20,r19
     d24:	1083ffcc 	andi	r2,r2,4095
     d28:	00c40004 	movi	r3,4096
     d2c:	1887c83a 	sub	r3,r3,r2
     d30:	28e7883a 	add	r19,r5,r3
     d34:	9009883a 	mov	r4,r18
     d38:	980b883a 	mov	r5,r19
     d3c:	00010980 	call	1098 <_sbrk_r>
     d40:	1007883a 	mov	r3,r2
     d44:	00bfffc4 	movi	r2,-1
     d48:	18807a26 	beq	r3,r2,f34 <_malloc_r+0x674>
     d4c:	1d05c83a 	sub	r2,r3,r20
     d50:	9885883a 	add	r2,r19,r2
     d54:	10c00054 	ori	r3,r2,1
     d58:	b8800017 	ldw	r2,0(r23)
     d5c:	a021883a 	mov	r16,r20
     d60:	a0c00115 	stw	r3,4(r20)
     d64:	9885883a 	add	r2,r19,r2
     d68:	b8800015 	stw	r2,0(r23)
     d6c:	e5000215 	stw	r20,8(fp)
     d70:	b7003626 	beq	r22,fp,e4c <_malloc_r+0x58c>
     d74:	018003c4 	movi	r6,15
     d78:	35404b36 	bltu	r6,r21,ea8 <_malloc_r+0x5e8>
     d7c:	00800044 	movi	r2,1
     d80:	a0800115 	stw	r2,4(r20)
     d84:	003fcd06 	br	cbc <_malloc_r+0x3fc>
     d88:	2808d27a 	srli	r4,r5,9
     d8c:	2000371e 	bne	r4,zero,e6c <_malloc_r+0x5ac>
     d90:	2808d0fa 	srli	r4,r5,3
     d94:	200690fa 	slli	r3,r4,3
     d98:	1ad1883a 	add	r8,r3,r11
     d9c:	41800217 	ldw	r6,8(r8)
     da0:	41805b26 	beq	r8,r6,f10 <_malloc_r+0x650>
     da4:	30800117 	ldw	r2,4(r6)
     da8:	00ffff04 	movi	r3,-4
     dac:	10c4703a 	and	r2,r2,r3
     db0:	2880022e 	bgeu	r5,r2,dbc <_malloc_r+0x4fc>
     db4:	31800217 	ldw	r6,8(r6)
     db8:	41bffa1e 	bne	r8,r6,da4 <_malloc_r+0x4e4>
     dbc:	32000317 	ldw	r8,12(r6)
     dc0:	39c00117 	ldw	r7,4(r7)
     dc4:	82000315 	stw	r8,12(r16)
     dc8:	81800215 	stw	r6,8(r16)
     dcc:	07000034 	movhi	fp,0
     dd0:	e70ff304 	addi	fp,fp,16332
     dd4:	34000315 	stw	r16,12(r6)
     dd8:	44000215 	stw	r16,8(r8)
     ddc:	003f3e06 	br	ad8 <_malloc_r+0x218>
     de0:	63000044 	addi	r12,r12,1
     de4:	608000cc 	andi	r2,r12,3
     de8:	10005d26 	beq	r2,zero,f60 <_malloc_r+0x6a0>
     dec:	18c00204 	addi	r3,r3,8
     df0:	003f5106 	br	b38 <_malloc_r+0x278>
     df4:	8089883a 	add	r4,r16,r2
     df8:	003f6d06 	br	bb0 <_malloc_r+0x2f0>
     dfc:	00805504 	movi	r2,340
     e00:	10c02036 	bltu	r2,r3,e84 <_malloc_r+0x5c4>
     e04:	8804d3fa 	srli	r2,r17,15
     e08:	11801dc4 	addi	r6,r2,119
     e0c:	300490fa 	slli	r2,r6,3
     e10:	003ed806 	br	974 <_malloc_r+0xb4>
     e14:	48c000c4 	addi	r3,r9,3
     e18:	003f3106 	br	ae0 <_malloc_r+0x220>
     e1c:	05c00034 	movhi	r23,0
     e20:	bddc2104 	addi	r23,r23,28804
     e24:	b8800017 	ldw	r2,0(r23)
     e28:	988d883a 	add	r6,r19,r2
     e2c:	b9800015 	stw	r6,0(r23)
     e30:	293fb21e 	bne	r5,r4,cfc <_malloc_r+0x43c>
     e34:	2083ffcc 	andi	r2,r4,4095
     e38:	103fb01e 	bne	r2,zero,cfc <_malloc_r+0x43c>
     e3c:	e4000217 	ldw	r16,8(fp)
     e40:	9d45883a 	add	r2,r19,r21
     e44:	10800054 	ori	r2,r2,1
     e48:	80800115 	stw	r2,4(r16)
     e4c:	b8c00017 	ldw	r3,0(r23)
     e50:	d0a6a117 	ldw	r2,-25980(gp)
     e54:	10c0012e 	bgeu	r2,r3,e5c <_malloc_r+0x59c>
     e58:	d0e6a115 	stw	r3,-25980(gp)
     e5c:	d0a6a217 	ldw	r2,-25976(gp)
     e60:	10ff962e 	bgeu	r2,r3,cbc <_malloc_r+0x3fc>
     e64:	d0e6a215 	stw	r3,-25976(gp)
     e68:	003f9406 	br	cbc <_malloc_r+0x3fc>
     e6c:	00800104 	movi	r2,4
     e70:	11001e36 	bltu	r2,r4,eec <_malloc_r+0x62c>
     e74:	2804d1ba 	srli	r2,r5,6
     e78:	11000e04 	addi	r4,r2,56
     e7c:	200690fa 	slli	r3,r4,3
     e80:	003fc506 	br	d98 <_malloc_r+0x4d8>
     e84:	00815504 	movi	r2,1364
     e88:	10c01d2e 	bgeu	r2,r3,f00 <_malloc_r+0x640>
     e8c:	01801f84 	movi	r6,126
     e90:	0080fc04 	movi	r2,1008
     e94:	003eb706 	br	974 <_malloc_r+0xb4>
     e98:	00800204 	movi	r2,8
     e9c:	10cbc83a 	sub	r5,r2,r3
     ea0:	2169883a 	add	r20,r4,r5
     ea4:	003f9e06 	br	d20 <_malloc_r+0x460>
     ea8:	00bffe04 	movi	r2,-8
     eac:	a93ffd04 	addi	r4,r21,-12
     eb0:	2088703a 	and	r4,r4,r2
     eb4:	b10b883a 	add	r5,r22,r4
     eb8:	00c00144 	movi	r3,5
     ebc:	28c00215 	stw	r3,8(r5)
     ec0:	28c00115 	stw	r3,4(r5)
     ec4:	b0800117 	ldw	r2,4(r22)
     ec8:	1080004c 	andi	r2,r2,1
     ecc:	2084b03a 	or	r2,r4,r2
     ed0:	b0800115 	stw	r2,4(r22)
     ed4:	313fdd2e 	bgeu	r6,r4,e4c <_malloc_r+0x58c>
     ed8:	b1400204 	addi	r5,r22,8
     edc:	9009883a 	mov	r4,r18
     ee0:	00012340 	call	1234 <_free_r>
     ee4:	e4000217 	ldw	r16,8(fp)
     ee8:	003fd806 	br	e4c <_malloc_r+0x58c>
     eec:	00800504 	movi	r2,20
     ef0:	11001536 	bltu	r2,r4,f48 <_malloc_r+0x688>
     ef4:	210016c4 	addi	r4,r4,91
     ef8:	200690fa 	slli	r3,r4,3
     efc:	003fa606 	br	d98 <_malloc_r+0x4d8>
     f00:	8804d4ba 	srli	r2,r17,18
     f04:	11801f04 	addi	r6,r2,124
     f08:	300490fa 	slli	r2,r6,3
     f0c:	003e9906 	br	974 <_malloc_r+0xb4>
     f10:	2009d0ba 	srai	r4,r4,2
     f14:	01400034 	movhi	r5,0
     f18:	294ff304 	addi	r5,r5,16332
     f1c:	00c00044 	movi	r3,1
     f20:	28800117 	ldw	r2,4(r5)
     f24:	1906983a 	sll	r3,r3,r4
     f28:	10c4b03a 	or	r2,r2,r3
     f2c:	28800115 	stw	r2,4(r5)
     f30:	003fa306 	br	dc0 <_malloc_r+0x500>
     f34:	0027883a 	mov	r19,zero
     f38:	00c00044 	movi	r3,1
     f3c:	003f8606 	br	d58 <_malloc_r+0x498>
     f40:	d1200315 	stw	r4,-32756(gp)
     f44:	003f7306 	br	d14 <_malloc_r+0x454>
     f48:	00801504 	movi	r2,84
     f4c:	11001936 	bltu	r2,r4,fb4 <_malloc_r+0x6f4>
     f50:	2804d33a 	srli	r2,r5,12
     f54:	11001b84 	addi	r4,r2,110
     f58:	200690fa 	slli	r3,r4,3
     f5c:	003f8e06 	br	d98 <_malloc_r+0x4d8>
     f60:	480b883a 	mov	r5,r9
     f64:	6807883a 	mov	r3,r13
     f68:	288000cc 	andi	r2,r5,3
     f6c:	18fffe04 	addi	r3,r3,-8
     f70:	297fffc4 	addi	r5,r5,-1
     f74:	10001526 	beq	r2,zero,fcc <_malloc_r+0x70c>
     f78:	18800217 	ldw	r2,8(r3)
     f7c:	10fffa26 	beq	r2,r3,f68 <_malloc_r+0x6a8>
     f80:	2109883a 	add	r4,r4,r4
     f84:	393f1e36 	bltu	r7,r4,c00 <_malloc_r+0x340>
     f88:	203f1d26 	beq	r4,zero,c00 <_malloc_r+0x340>
     f8c:	21c4703a 	and	r2,r4,r7
     f90:	10000226 	beq	r2,zero,f9c <_malloc_r+0x6dc>
     f94:	6013883a 	mov	r9,r12
     f98:	003ee106 	br	b20 <_malloc_r+0x260>
     f9c:	2109883a 	add	r4,r4,r4
     fa0:	3904703a 	and	r2,r7,r4
     fa4:	63000104 	addi	r12,r12,4
     fa8:	103ffc26 	beq	r2,zero,f9c <_malloc_r+0x6dc>
     fac:	6013883a 	mov	r9,r12
     fb0:	003edb06 	br	b20 <_malloc_r+0x260>
     fb4:	00805504 	movi	r2,340
     fb8:	11000836 	bltu	r2,r4,fdc <_malloc_r+0x71c>
     fbc:	2804d3fa 	srli	r2,r5,15
     fc0:	11001dc4 	addi	r4,r2,119
     fc4:	200690fa 	slli	r3,r4,3
     fc8:	003f7306 	br	d98 <_malloc_r+0x4d8>
     fcc:	0104303a 	nor	r2,zero,r4
     fd0:	388e703a 	and	r7,r7,r2
     fd4:	e1c00115 	stw	r7,4(fp)
     fd8:	003fe906 	br	f80 <_malloc_r+0x6c0>
     fdc:	00815504 	movi	r2,1364
     fe0:	1100032e 	bgeu	r2,r4,ff0 <_malloc_r+0x730>
     fe4:	01001f84 	movi	r4,126
     fe8:	00c0fc04 	movi	r3,1008
     fec:	003f6a06 	br	d98 <_malloc_r+0x4d8>
     ff0:	2804d4ba 	srli	r2,r5,18
     ff4:	11001f04 	addi	r4,r2,124
     ff8:	200690fa 	slli	r3,r4,3
     ffc:	003f6606 	br	d98 <_malloc_r+0x4d8>

00001000 <memset>:
    1000:	008000c4 	movi	r2,3
    1004:	29403fcc 	andi	r5,r5,255
    1008:	2007883a 	mov	r3,r4
    100c:	1180022e 	bgeu	r2,r6,1018 <memset+0x18>
    1010:	2084703a 	and	r2,r4,r2
    1014:	10000826 	beq	r2,zero,1038 <memset+0x38>
    1018:	30000526 	beq	r6,zero,1030 <memset+0x30>
    101c:	2805883a 	mov	r2,r5
    1020:	30cd883a 	add	r6,r6,r3
    1024:	18800005 	stb	r2,0(r3)
    1028:	18c00044 	addi	r3,r3,1
    102c:	19bffd1e 	bne	r3,r6,1024 <memset+0x24>
    1030:	2005883a 	mov	r2,r4
    1034:	f800283a 	ret
    1038:	2804923a 	slli	r2,r5,8
    103c:	020003c4 	movi	r8,15
    1040:	200f883a 	mov	r7,r4
    1044:	2884b03a 	or	r2,r5,r2
    1048:	1006943a 	slli	r3,r2,16
    104c:	10c6b03a 	or	r3,r2,r3
    1050:	41800a2e 	bgeu	r8,r6,107c <memset+0x7c>
    1054:	4005883a 	mov	r2,r8
    1058:	31bffc04 	addi	r6,r6,-16
    105c:	38c00015 	stw	r3,0(r7)
    1060:	38c00115 	stw	r3,4(r7)
    1064:	38c00215 	stw	r3,8(r7)
    1068:	38c00315 	stw	r3,12(r7)
    106c:	39c00404 	addi	r7,r7,16
    1070:	11bff936 	bltu	r2,r6,1058 <memset+0x58>
    1074:	008000c4 	movi	r2,3
    1078:	1180052e 	bgeu	r2,r6,1090 <memset+0x90>
    107c:	31bfff04 	addi	r6,r6,-4
    1080:	008000c4 	movi	r2,3
    1084:	38c00015 	stw	r3,0(r7)
    1088:	39c00104 	addi	r7,r7,4
    108c:	11bffb36 	bltu	r2,r6,107c <memset+0x7c>
    1090:	3807883a 	mov	r3,r7
    1094:	003fe006 	br	1018 <memset+0x18>

00001098 <_sbrk_r>:
    1098:	defffd04 	addi	sp,sp,-12
    109c:	dc000015 	stw	r16,0(sp)
    10a0:	04000034 	movhi	r16,0
    10a4:	841c1a04 	addi	r16,r16,28776
    10a8:	dc400115 	stw	r17,4(sp)
    10ac:	80000015 	stw	zero,0(r16)
    10b0:	2023883a 	mov	r17,r4
    10b4:	2809883a 	mov	r4,r5
    10b8:	dfc00215 	stw	ra,8(sp)
    10bc:	00016e00 	call	16e0 <sbrk>
    10c0:	1007883a 	mov	r3,r2
    10c4:	00bfffc4 	movi	r2,-1
    10c8:	18800626 	beq	r3,r2,10e4 <_sbrk_r+0x4c>
    10cc:	1805883a 	mov	r2,r3
    10d0:	dfc00217 	ldw	ra,8(sp)
    10d4:	dc400117 	ldw	r17,4(sp)
    10d8:	dc000017 	ldw	r16,0(sp)
    10dc:	dec00304 	addi	sp,sp,12
    10e0:	f800283a 	ret
    10e4:	80800017 	ldw	r2,0(r16)
    10e8:	103ff826 	beq	r2,zero,10cc <_sbrk_r+0x34>
    10ec:	88800015 	stw	r2,0(r17)
    10f0:	1805883a 	mov	r2,r3
    10f4:	dfc00217 	ldw	ra,8(sp)
    10f8:	dc400117 	ldw	r17,4(sp)
    10fc:	dc000017 	ldw	r16,0(sp)
    1100:	dec00304 	addi	sp,sp,12
    1104:	f800283a 	ret

00001108 <_malloc_trim_r>:
    1108:	defffb04 	addi	sp,sp,-20
    110c:	dcc00315 	stw	r19,12(sp)
    1110:	04c00034 	movhi	r19,0
    1114:	9ccff304 	addi	r19,r19,16332
    1118:	dc800215 	stw	r18,8(sp)
    111c:	dc400115 	stw	r17,4(sp)
    1120:	dc000015 	stw	r16,0(sp)
    1124:	2823883a 	mov	r17,r5
    1128:	2025883a 	mov	r18,r4
    112c:	dfc00415 	stw	ra,16(sp)
    1130:	00016a00 	call	16a0 <__malloc_lock>
    1134:	98800217 	ldw	r2,8(r19)
    1138:	9009883a 	mov	r4,r18
    113c:	000b883a 	mov	r5,zero
    1140:	10c00117 	ldw	r3,4(r2)
    1144:	00bfff04 	movi	r2,-4
    1148:	18a0703a 	and	r16,r3,r2
    114c:	8463c83a 	sub	r17,r16,r17
    1150:	8c43fbc4 	addi	r17,r17,4079
    1154:	8822d33a 	srli	r17,r17,12
    1158:	0083ffc4 	movi	r2,4095
    115c:	8c7fffc4 	addi	r17,r17,-1
    1160:	8822933a 	slli	r17,r17,12
    1164:	1440060e 	bge	r2,r17,1180 <_malloc_trim_r+0x78>
    1168:	00010980 	call	1098 <_sbrk_r>
    116c:	98c00217 	ldw	r3,8(r19)
    1170:	9009883a 	mov	r4,r18
    1174:	044bc83a 	sub	r5,zero,r17
    1178:	80c7883a 	add	r3,r16,r3
    117c:	10c00926 	beq	r2,r3,11a4 <_malloc_trim_r+0x9c>
    1180:	00016c00 	call	16c0 <__malloc_unlock>
    1184:	0005883a 	mov	r2,zero
    1188:	dfc00417 	ldw	ra,16(sp)
    118c:	dcc00317 	ldw	r19,12(sp)
    1190:	dc800217 	ldw	r18,8(sp)
    1194:	dc400117 	ldw	r17,4(sp)
    1198:	dc000017 	ldw	r16,0(sp)
    119c:	dec00504 	addi	sp,sp,20
    11a0:	f800283a 	ret
    11a4:	9009883a 	mov	r4,r18
    11a8:	00010980 	call	1098 <_sbrk_r>
    11ac:	844dc83a 	sub	r6,r16,r17
    11b0:	00ffffc4 	movi	r3,-1
    11b4:	9009883a 	mov	r4,r18
    11b8:	000b883a 	mov	r5,zero
    11bc:	01c00034 	movhi	r7,0
    11c0:	39dc2104 	addi	r7,r7,28804
    11c4:	31800054 	ori	r6,r6,1
    11c8:	10c00926 	beq	r2,r3,11f0 <_malloc_trim_r+0xe8>
    11cc:	38800017 	ldw	r2,0(r7)
    11d0:	98c00217 	ldw	r3,8(r19)
    11d4:	9009883a 	mov	r4,r18
    11d8:	1445c83a 	sub	r2,r2,r17
    11dc:	38800015 	stw	r2,0(r7)
    11e0:	19800115 	stw	r6,4(r3)
    11e4:	00016c00 	call	16c0 <__malloc_unlock>
    11e8:	00800044 	movi	r2,1
    11ec:	003fe606 	br	1188 <_malloc_trim_r+0x80>
    11f0:	00010980 	call	1098 <_sbrk_r>
    11f4:	99800217 	ldw	r6,8(r19)
    11f8:	100f883a 	mov	r7,r2
    11fc:	9009883a 	mov	r4,r18
    1200:	1187c83a 	sub	r3,r2,r6
    1204:	008003c4 	movi	r2,15
    1208:	19400054 	ori	r5,r3,1
    120c:	10ffdc0e 	bge	r2,r3,1180 <_malloc_trim_r+0x78>
    1210:	00800034 	movhi	r2,0
    1214:	10957a04 	addi	r2,r2,21992
    1218:	10c00017 	ldw	r3,0(r2)
    121c:	00800034 	movhi	r2,0
    1220:	109c2104 	addi	r2,r2,28804
    1224:	31400115 	stw	r5,4(r6)
    1228:	38c7c83a 	sub	r3,r7,r3
    122c:	10c00015 	stw	r3,0(r2)
    1230:	003fd306 	br	1180 <_malloc_trim_r+0x78>

00001234 <_free_r>:
    1234:	defffd04 	addi	sp,sp,-12
    1238:	dc400115 	stw	r17,4(sp)
    123c:	dc000015 	stw	r16,0(sp)
    1240:	dfc00215 	stw	ra,8(sp)
    1244:	2821883a 	mov	r16,r5
    1248:	2023883a 	mov	r17,r4
    124c:	28005a26 	beq	r5,zero,13b8 <_free_r+0x184>
    1250:	00016a00 	call	16a0 <__malloc_lock>
    1254:	823ffe04 	addi	r8,r16,-8
    1258:	41400117 	ldw	r5,4(r8)
    125c:	00bfff84 	movi	r2,-2
    1260:	02800034 	movhi	r10,0
    1264:	528ff304 	addi	r10,r10,16332
    1268:	288e703a 	and	r7,r5,r2
    126c:	41cd883a 	add	r6,r8,r7
    1270:	30c00117 	ldw	r3,4(r6)
    1274:	51000217 	ldw	r4,8(r10)
    1278:	00bfff04 	movi	r2,-4
    127c:	1892703a 	and	r9,r3,r2
    1280:	5017883a 	mov	r11,r10
    1284:	31006726 	beq	r6,r4,1424 <_free_r+0x1f0>
    1288:	2880004c 	andi	r2,r5,1
    128c:	1005003a 	cmpeq	r2,r2,zero
    1290:	32400115 	stw	r9,4(r6)
    1294:	10001a1e 	bne	r2,zero,1300 <_free_r+0xcc>
    1298:	000b883a 	mov	r5,zero
    129c:	3247883a 	add	r3,r6,r9
    12a0:	18800117 	ldw	r2,4(r3)
    12a4:	1080004c 	andi	r2,r2,1
    12a8:	1000231e 	bne	r2,zero,1338 <_free_r+0x104>
    12ac:	280ac03a 	cmpne	r5,r5,zero
    12b0:	3a4f883a 	add	r7,r7,r9
    12b4:	2800451e 	bne	r5,zero,13cc <_free_r+0x198>
    12b8:	31000217 	ldw	r4,8(r6)
    12bc:	00800034 	movhi	r2,0
    12c0:	108ff504 	addi	r2,r2,16340
    12c4:	20807b26 	beq	r4,r2,14b4 <_free_r+0x280>
    12c8:	30800317 	ldw	r2,12(r6)
    12cc:	3a07883a 	add	r3,r7,r8
    12d0:	19c00015 	stw	r7,0(r3)
    12d4:	11000215 	stw	r4,8(r2)
    12d8:	20800315 	stw	r2,12(r4)
    12dc:	38800054 	ori	r2,r7,1
    12e0:	40800115 	stw	r2,4(r8)
    12e4:	28001a26 	beq	r5,zero,1350 <_free_r+0x11c>
    12e8:	8809883a 	mov	r4,r17
    12ec:	dfc00217 	ldw	ra,8(sp)
    12f0:	dc400117 	ldw	r17,4(sp)
    12f4:	dc000017 	ldw	r16,0(sp)
    12f8:	dec00304 	addi	sp,sp,12
    12fc:	00016c01 	jmpi	16c0 <__malloc_unlock>
    1300:	80bffe17 	ldw	r2,-8(r16)
    1304:	50c00204 	addi	r3,r10,8
    1308:	4091c83a 	sub	r8,r8,r2
    130c:	41000217 	ldw	r4,8(r8)
    1310:	388f883a 	add	r7,r7,r2
    1314:	20c06126 	beq	r4,r3,149c <_free_r+0x268>
    1318:	40800317 	ldw	r2,12(r8)
    131c:	3247883a 	add	r3,r6,r9
    1320:	000b883a 	mov	r5,zero
    1324:	11000215 	stw	r4,8(r2)
    1328:	20800315 	stw	r2,12(r4)
    132c:	18800117 	ldw	r2,4(r3)
    1330:	1080004c 	andi	r2,r2,1
    1334:	103fdd26 	beq	r2,zero,12ac <_free_r+0x78>
    1338:	38800054 	ori	r2,r7,1
    133c:	3a07883a 	add	r3,r7,r8
    1340:	280ac03a 	cmpne	r5,r5,zero
    1344:	40800115 	stw	r2,4(r8)
    1348:	19c00015 	stw	r7,0(r3)
    134c:	283fe61e 	bne	r5,zero,12e8 <_free_r+0xb4>
    1350:	00807fc4 	movi	r2,511
    1354:	11c01f2e 	bgeu	r2,r7,13d4 <_free_r+0x1a0>
    1358:	3806d27a 	srli	r3,r7,9
    135c:	1800481e 	bne	r3,zero,1480 <_free_r+0x24c>
    1360:	3804d0fa 	srli	r2,r7,3
    1364:	100690fa 	slli	r3,r2,3
    1368:	1acd883a 	add	r6,r3,r11
    136c:	31400217 	ldw	r5,8(r6)
    1370:	31405926 	beq	r6,r5,14d8 <_free_r+0x2a4>
    1374:	28800117 	ldw	r2,4(r5)
    1378:	00ffff04 	movi	r3,-4
    137c:	10c4703a 	and	r2,r2,r3
    1380:	3880022e 	bgeu	r7,r2,138c <_free_r+0x158>
    1384:	29400217 	ldw	r5,8(r5)
    1388:	317ffa1e 	bne	r6,r5,1374 <_free_r+0x140>
    138c:	29800317 	ldw	r6,12(r5)
    1390:	41800315 	stw	r6,12(r8)
    1394:	41400215 	stw	r5,8(r8)
    1398:	8809883a 	mov	r4,r17
    139c:	2a000315 	stw	r8,12(r5)
    13a0:	32000215 	stw	r8,8(r6)
    13a4:	dfc00217 	ldw	ra,8(sp)
    13a8:	dc400117 	ldw	r17,4(sp)
    13ac:	dc000017 	ldw	r16,0(sp)
    13b0:	dec00304 	addi	sp,sp,12
    13b4:	00016c01 	jmpi	16c0 <__malloc_unlock>
    13b8:	dfc00217 	ldw	ra,8(sp)
    13bc:	dc400117 	ldw	r17,4(sp)
    13c0:	dc000017 	ldw	r16,0(sp)
    13c4:	dec00304 	addi	sp,sp,12
    13c8:	f800283a 	ret
    13cc:	31000217 	ldw	r4,8(r6)
    13d0:	003fbd06 	br	12c8 <_free_r+0x94>
    13d4:	3806d0fa 	srli	r3,r7,3
    13d8:	00800044 	movi	r2,1
    13dc:	51400117 	ldw	r5,4(r10)
    13e0:	180890fa 	slli	r4,r3,3
    13e4:	1807d0ba 	srai	r3,r3,2
    13e8:	22c9883a 	add	r4,r4,r11
    13ec:	21800217 	ldw	r6,8(r4)
    13f0:	10c4983a 	sll	r2,r2,r3
    13f4:	41000315 	stw	r4,12(r8)
    13f8:	41800215 	stw	r6,8(r8)
    13fc:	288ab03a 	or	r5,r5,r2
    1400:	22000215 	stw	r8,8(r4)
    1404:	8809883a 	mov	r4,r17
    1408:	51400115 	stw	r5,4(r10)
    140c:	32000315 	stw	r8,12(r6)
    1410:	dfc00217 	ldw	ra,8(sp)
    1414:	dc400117 	ldw	r17,4(sp)
    1418:	dc000017 	ldw	r16,0(sp)
    141c:	dec00304 	addi	sp,sp,12
    1420:	00016c01 	jmpi	16c0 <__malloc_unlock>
    1424:	2880004c 	andi	r2,r5,1
    1428:	3a4d883a 	add	r6,r7,r9
    142c:	1000071e 	bne	r2,zero,144c <_free_r+0x218>
    1430:	80bffe17 	ldw	r2,-8(r16)
    1434:	4091c83a 	sub	r8,r8,r2
    1438:	41000317 	ldw	r4,12(r8)
    143c:	40c00217 	ldw	r3,8(r8)
    1440:	308d883a 	add	r6,r6,r2
    1444:	20c00215 	stw	r3,8(r4)
    1448:	19000315 	stw	r4,12(r3)
    144c:	00800034 	movhi	r2,0
    1450:	10957904 	addi	r2,r2,21988
    1454:	11000017 	ldw	r4,0(r2)
    1458:	30c00054 	ori	r3,r6,1
    145c:	52000215 	stw	r8,8(r10)
    1460:	40c00115 	stw	r3,4(r8)
    1464:	313fa036 	bltu	r6,r4,12e8 <_free_r+0xb4>
    1468:	00800034 	movhi	r2,0
    146c:	109c1704 	addi	r2,r2,28764
    1470:	11400017 	ldw	r5,0(r2)
    1474:	8809883a 	mov	r4,r17
    1478:	00011080 	call	1108 <_malloc_trim_r>
    147c:	003f9a06 	br	12e8 <_free_r+0xb4>
    1480:	00800104 	movi	r2,4
    1484:	10c0072e 	bgeu	r2,r3,14a4 <_free_r+0x270>
    1488:	00800504 	movi	r2,20
    148c:	10c01936 	bltu	r2,r3,14f4 <_free_r+0x2c0>
    1490:	188016c4 	addi	r2,r3,91
    1494:	100690fa 	slli	r3,r2,3
    1498:	003fb306 	br	1368 <_free_r+0x134>
    149c:	01400044 	movi	r5,1
    14a0:	003f7e06 	br	129c <_free_r+0x68>
    14a4:	3804d1ba 	srli	r2,r7,6
    14a8:	10800e04 	addi	r2,r2,56
    14ac:	100690fa 	slli	r3,r2,3
    14b0:	003fad06 	br	1368 <_free_r+0x134>
    14b4:	22000315 	stw	r8,12(r4)
    14b8:	22000215 	stw	r8,8(r4)
    14bc:	3a05883a 	add	r2,r7,r8
    14c0:	38c00054 	ori	r3,r7,1
    14c4:	11c00015 	stw	r7,0(r2)
    14c8:	41000215 	stw	r4,8(r8)
    14cc:	40c00115 	stw	r3,4(r8)
    14d0:	41000315 	stw	r4,12(r8)
    14d4:	003f8406 	br	12e8 <_free_r+0xb4>
    14d8:	1005d0ba 	srai	r2,r2,2
    14dc:	00c00044 	movi	r3,1
    14e0:	51000117 	ldw	r4,4(r10)
    14e4:	1886983a 	sll	r3,r3,r2
    14e8:	20c8b03a 	or	r4,r4,r3
    14ec:	51000115 	stw	r4,4(r10)
    14f0:	003fa706 	br	1390 <_free_r+0x15c>
    14f4:	00801504 	movi	r2,84
    14f8:	10c00436 	bltu	r2,r3,150c <_free_r+0x2d8>
    14fc:	3804d33a 	srli	r2,r7,12
    1500:	10801b84 	addi	r2,r2,110
    1504:	100690fa 	slli	r3,r2,3
    1508:	003f9706 	br	1368 <_free_r+0x134>
    150c:	00805504 	movi	r2,340
    1510:	10c00436 	bltu	r2,r3,1524 <_free_r+0x2f0>
    1514:	3804d3fa 	srli	r2,r7,15
    1518:	10801dc4 	addi	r2,r2,119
    151c:	100690fa 	slli	r3,r2,3
    1520:	003f9106 	br	1368 <_free_r+0x134>
    1524:	00815504 	movi	r2,1364
    1528:	10c0032e 	bgeu	r2,r3,1538 <_free_r+0x304>
    152c:	00801f84 	movi	r2,126
    1530:	00c0fc04 	movi	r3,1008
    1534:	003f8c06 	br	1368 <_free_r+0x134>
    1538:	3804d4ba 	srli	r2,r7,18
    153c:	10801f04 	addi	r2,r2,124
    1540:	100690fa 	slli	r3,r2,3
    1544:	003f8806 	br	1368 <_free_r+0x134>

00001548 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1548:	defffe04 	addi	sp,sp,-8
    154c:	dfc00115 	stw	ra,4(sp)
    1550:	df000015 	stw	fp,0(sp)
    1554:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1558:	01000034 	movhi	r4,0
    155c:	21158504 	addi	r4,r4,22036
    1560:	01400034 	movhi	r5,0
    1564:	294ef304 	addi	r5,r5,15308
    1568:	01800034 	movhi	r6,0
    156c:	31958504 	addi	r6,r6,22036
    1570:	00015c80 	call	15c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1574:	01000034 	movhi	r4,0
    1578:	21000804 	addi	r4,r4,32
    157c:	01400034 	movhi	r5,0
    1580:	29400804 	addi	r5,r5,32
    1584:	01800034 	movhi	r6,0
    1588:	31806d04 	addi	r6,r6,436
    158c:	00015c80 	call	15c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1590:	01000034 	movhi	r4,0
    1594:	210ee704 	addi	r4,r4,15260
    1598:	01400034 	movhi	r5,0
    159c:	294ee704 	addi	r5,r5,15260
    15a0:	01800034 	movhi	r6,0
    15a4:	318ef304 	addi	r6,r6,15308
    15a8:	00015c80 	call	15c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    15ac:	000283c0 	call	283c <alt_dcache_flush_all>
  alt_icache_flush_all();
    15b0:	0002a600 	call	2a60 <alt_icache_flush_all>
}
    15b4:	e037883a 	mov	sp,fp
    15b8:	dfc00117 	ldw	ra,4(sp)
    15bc:	df000017 	ldw	fp,0(sp)
    15c0:	dec00204 	addi	sp,sp,8
    15c4:	f800283a 	ret

000015c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    15c8:	defffc04 	addi	sp,sp,-16
    15cc:	df000315 	stw	fp,12(sp)
    15d0:	df000304 	addi	fp,sp,12
    15d4:	e13ffd15 	stw	r4,-12(fp)
    15d8:	e17ffe15 	stw	r5,-8(fp)
    15dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    15e0:	e0fffe17 	ldw	r3,-8(fp)
    15e4:	e0bffd17 	ldw	r2,-12(fp)
    15e8:	18800e26 	beq	r3,r2,1624 <alt_load_section+0x5c>
  {
    while( to != end )
    15ec:	00000a06 	br	1618 <alt_load_section+0x50>
    {
      *to++ = *from++;
    15f0:	e0bffd17 	ldw	r2,-12(fp)
    15f4:	10c00017 	ldw	r3,0(r2)
    15f8:	e0bffe17 	ldw	r2,-8(fp)
    15fc:	10c00015 	stw	r3,0(r2)
    1600:	e0bffe17 	ldw	r2,-8(fp)
    1604:	10800104 	addi	r2,r2,4
    1608:	e0bffe15 	stw	r2,-8(fp)
    160c:	e0bffd17 	ldw	r2,-12(fp)
    1610:	10800104 	addi	r2,r2,4
    1614:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1618:	e0fffe17 	ldw	r3,-8(fp)
    161c:	e0bfff17 	ldw	r2,-4(fp)
    1620:	18bff31e 	bne	r3,r2,15f0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1624:	e037883a 	mov	sp,fp
    1628:	df000017 	ldw	fp,0(sp)
    162c:	dec00104 	addi	sp,sp,4
    1630:	f800283a 	ret

00001634 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1634:	defffd04 	addi	sp,sp,-12
    1638:	dfc00215 	stw	ra,8(sp)
    163c:	df000115 	stw	fp,4(sp)
    1640:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1644:	0009883a 	mov	r4,zero
    1648:	00017cc0 	call	17cc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    164c:	00018000 	call	1800 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    1650:	01000034 	movhi	r4,0
    1654:	210ee804 	addi	r4,r4,15264
    1658:	01400034 	movhi	r5,0
    165c:	294ee804 	addi	r5,r5,15264
    1660:	01800034 	movhi	r6,0
    1664:	318ee804 	addi	r6,r6,15264
    1668:	0002e200 	call	2e20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    166c:	00029980 	call	2998 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    1670:	01000034 	movhi	r4,0
    1674:	210a7f04 	addi	r4,r4,10748
    1678:	000367c0 	call	367c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    167c:	d126a417 	ldw	r4,-25968(gp)
    1680:	d166a517 	ldw	r5,-25964(gp)
    1684:	d1a6a617 	ldw	r6,-25960(gp)
    1688:	00001f00 	call	1f0 <main>
    168c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    1690:	01000044 	movi	r4,1
    1694:	00026e00 	call	26e0 <close>
  exit (result);
    1698:	e13fff17 	ldw	r4,-4(fp)
    169c:	00036900 	call	3690 <exit>

000016a0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    16a0:	defffe04 	addi	sp,sp,-8
    16a4:	df000115 	stw	fp,4(sp)
    16a8:	df000104 	addi	fp,sp,4
    16ac:	e13fff15 	stw	r4,-4(fp)
}
    16b0:	e037883a 	mov	sp,fp
    16b4:	df000017 	ldw	fp,0(sp)
    16b8:	dec00104 	addi	sp,sp,4
    16bc:	f800283a 	ret

000016c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    16c0:	defffe04 	addi	sp,sp,-8
    16c4:	df000115 	stw	fp,4(sp)
    16c8:	df000104 	addi	fp,sp,4
    16cc:	e13fff15 	stw	r4,-4(fp)
}
    16d0:	e037883a 	mov	sp,fp
    16d4:	df000017 	ldw	fp,0(sp)
    16d8:	dec00104 	addi	sp,sp,4
    16dc:	f800283a 	ret

000016e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    16e0:	defff804 	addi	sp,sp,-32
    16e4:	df000715 	stw	fp,28(sp)
    16e8:	df000704 	addi	fp,sp,28
    16ec:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    16f0:	0005303a 	rdctl	r2,status
    16f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    16f8:	e0fffb17 	ldw	r3,-20(fp)
    16fc:	00bfff84 	movi	r2,-2
    1700:	1884703a 	and	r2,r3,r2
    1704:	1001703a 	wrctl	status,r2
  
  return context;
    1708:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    170c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    1710:	d0a00417 	ldw	r2,-32752(gp)
    1714:	10c000c4 	addi	r3,r2,3
    1718:	00bfff04 	movi	r2,-4
    171c:	1884703a 	and	r2,r3,r2
    1720:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    1724:	d0e00417 	ldw	r3,-32752(gp)
    1728:	e0bffe17 	ldw	r2,-8(fp)
    172c:	1887883a 	add	r3,r3,r2
    1730:	00802034 	movhi	r2,128
    1734:	10800004 	addi	r2,r2,0
    1738:	10c0072e 	bgeu	r2,r3,1758 <sbrk+0x78>
    173c:	e0bffd17 	ldw	r2,-12(fp)
    1740:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1744:	e0bffa17 	ldw	r2,-24(fp)
    1748:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    174c:	00bfffc4 	movi	r2,-1
    1750:	e0bfff15 	stw	r2,-4(fp)
    1754:	00000c06 	br	1788 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    1758:	d0a00417 	ldw	r2,-32752(gp)
    175c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    1760:	d0e00417 	ldw	r3,-32752(gp)
    1764:	e0bffe17 	ldw	r2,-8(fp)
    1768:	1885883a 	add	r2,r3,r2
    176c:	d0a00415 	stw	r2,-32752(gp)
    1770:	e0bffd17 	ldw	r2,-12(fp)
    1774:	e0bff915 	stw	r2,-28(fp)
    1778:	e0bff917 	ldw	r2,-28(fp)
    177c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    1780:	e0bffc17 	ldw	r2,-16(fp)
    1784:	e0bfff15 	stw	r2,-4(fp)
    1788:	e0bfff17 	ldw	r2,-4(fp)
} 
    178c:	e037883a 	mov	sp,fp
    1790:	df000017 	ldw	fp,0(sp)
    1794:	dec00104 	addi	sp,sp,4
    1798:	f800283a 	ret

0000179c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    179c:	defffd04 	addi	sp,sp,-12
    17a0:	dfc00215 	stw	ra,8(sp)
    17a4:	df000115 	stw	fp,4(sp)
    17a8:	df000104 	addi	fp,sp,4
    17ac:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    17b0:	e13fff17 	ldw	r4,-4(fp)
    17b4:	00025940 	call	2594 <alt_busy_sleep>
}
    17b8:	e037883a 	mov	sp,fp
    17bc:	dfc00117 	ldw	ra,4(sp)
    17c0:	df000017 	ldw	fp,0(sp)
    17c4:	dec00204 	addi	sp,sp,8
    17c8:	f800283a 	ret

000017cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    17cc:	defffd04 	addi	sp,sp,-12
    17d0:	dfc00215 	stw	ra,8(sp)
    17d4:	df000115 	stw	fp,4(sp)
    17d8:	df000104 	addi	fp,sp,4
    17dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
    17e0:	00033600 	call	3360 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    17e4:	00800044 	movi	r2,1
    17e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    17ec:	e037883a 	mov	sp,fp
    17f0:	dfc00117 	ldw	ra,4(sp)
    17f4:	df000017 	ldw	fp,0(sp)
    17f8:	dec00204 	addi	sp,sp,8
    17fc:	f800283a 	ret

00001800 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1800:	defffe04 	addi	sp,sp,-8
    1804:	dfc00115 	stw	ra,4(sp)
    1808:	df000015 	stw	fp,0(sp)
    180c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_timer);
    1810:	01040034 	movhi	r4,4096
    1814:	21080004 	addi	r4,r4,8192
    1818:	000b883a 	mov	r5,zero
    181c:	000d883a 	mov	r6,zero
    1820:	01c00204 	movi	r7,8
    1824:	00023b00 	call	23b0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    1828:	01000034 	movhi	r4,0
    182c:	2110ff04 	addi	r4,r4,17404
    1830:	000b883a 	mov	r5,zero
    1834:	01800204 	movi	r6,8
    1838:	00019dc0 	call	19dc <altera_avalon_jtag_uart_init>
    183c:	01000034 	movhi	r4,0
    1840:	2110f504 	addi	r4,r4,17364
    1844:	000185c0 	call	185c <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    1848:	e037883a 	mov	sp,fp
    184c:	dfc00117 	ldw	ra,4(sp)
    1850:	df000017 	ldw	fp,0(sp)
    1854:	dec00204 	addi	sp,sp,8
    1858:	f800283a 	ret

0000185c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    185c:	defffd04 	addi	sp,sp,-12
    1860:	dfc00215 	stw	ra,8(sp)
    1864:	df000115 	stw	fp,4(sp)
    1868:	df000104 	addi	fp,sp,4
    186c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1870:	e13fff17 	ldw	r4,-4(fp)
    1874:	01400034 	movhi	r5,0
    1878:	29557e04 	addi	r5,r5,22008
    187c:	00028840 	call	2884 <alt_dev_llist_insert>
}
    1880:	e037883a 	mov	sp,fp
    1884:	dfc00117 	ldw	ra,4(sp)
    1888:	df000017 	ldw	fp,0(sp)
    188c:	dec00204 	addi	sp,sp,8
    1890:	f800283a 	ret

00001894 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1894:	defffa04 	addi	sp,sp,-24
    1898:	dfc00515 	stw	ra,20(sp)
    189c:	df000415 	stw	fp,16(sp)
    18a0:	df000404 	addi	fp,sp,16
    18a4:	e13ffd15 	stw	r4,-12(fp)
    18a8:	e17ffe15 	stw	r5,-8(fp)
    18ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    18b0:	e0bffd17 	ldw	r2,-12(fp)
    18b4:	10800017 	ldw	r2,0(r2)
    18b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    18bc:	e0bffc17 	ldw	r2,-16(fp)
    18c0:	11000a04 	addi	r4,r2,40
    18c4:	e0bffd17 	ldw	r2,-12(fp)
    18c8:	11c00217 	ldw	r7,8(r2)
    18cc:	e17ffe17 	ldw	r5,-8(fp)
    18d0:	e1bfff17 	ldw	r6,-4(fp)
    18d4:	0001edc0 	call	1edc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    18d8:	e037883a 	mov	sp,fp
    18dc:	dfc00117 	ldw	ra,4(sp)
    18e0:	df000017 	ldw	fp,0(sp)
    18e4:	dec00204 	addi	sp,sp,8
    18e8:	f800283a 	ret

000018ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    18ec:	defffa04 	addi	sp,sp,-24
    18f0:	dfc00515 	stw	ra,20(sp)
    18f4:	df000415 	stw	fp,16(sp)
    18f8:	df000404 	addi	fp,sp,16
    18fc:	e13ffd15 	stw	r4,-12(fp)
    1900:	e17ffe15 	stw	r5,-8(fp)
    1904:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1908:	e0bffd17 	ldw	r2,-12(fp)
    190c:	10800017 	ldw	r2,0(r2)
    1910:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1914:	e0bffc17 	ldw	r2,-16(fp)
    1918:	11000a04 	addi	r4,r2,40
    191c:	e0bffd17 	ldw	r2,-12(fp)
    1920:	11c00217 	ldw	r7,8(r2)
    1924:	e17ffe17 	ldw	r5,-8(fp)
    1928:	e1bfff17 	ldw	r6,-4(fp)
    192c:	00021000 	call	2100 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1930:	e037883a 	mov	sp,fp
    1934:	dfc00117 	ldw	ra,4(sp)
    1938:	df000017 	ldw	fp,0(sp)
    193c:	dec00204 	addi	sp,sp,8
    1940:	f800283a 	ret

00001944 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1944:	defffc04 	addi	sp,sp,-16
    1948:	dfc00315 	stw	ra,12(sp)
    194c:	df000215 	stw	fp,8(sp)
    1950:	df000204 	addi	fp,sp,8
    1954:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1958:	e0bfff17 	ldw	r2,-4(fp)
    195c:	10800017 	ldw	r2,0(r2)
    1960:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1964:	e0bffe17 	ldw	r2,-8(fp)
    1968:	11000a04 	addi	r4,r2,40
    196c:	e0bfff17 	ldw	r2,-4(fp)
    1970:	11400217 	ldw	r5,8(r2)
    1974:	0001d740 	call	1d74 <altera_avalon_jtag_uart_close>
}
    1978:	e037883a 	mov	sp,fp
    197c:	dfc00117 	ldw	ra,4(sp)
    1980:	df000017 	ldw	fp,0(sp)
    1984:	dec00204 	addi	sp,sp,8
    1988:	f800283a 	ret

0000198c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    198c:	defffa04 	addi	sp,sp,-24
    1990:	dfc00515 	stw	ra,20(sp)
    1994:	df000415 	stw	fp,16(sp)
    1998:	df000404 	addi	fp,sp,16
    199c:	e13ffd15 	stw	r4,-12(fp)
    19a0:	e17ffe15 	stw	r5,-8(fp)
    19a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    19a8:	e0bffd17 	ldw	r2,-12(fp)
    19ac:	10800017 	ldw	r2,0(r2)
    19b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    19b4:	e0bffc17 	ldw	r2,-16(fp)
    19b8:	11000a04 	addi	r4,r2,40
    19bc:	e17ffe17 	ldw	r5,-8(fp)
    19c0:	e1bfff17 	ldw	r6,-4(fp)
    19c4:	0001de80 	call	1de8 <altera_avalon_jtag_uart_ioctl>
}
    19c8:	e037883a 	mov	sp,fp
    19cc:	dfc00117 	ldw	ra,4(sp)
    19d0:	df000017 	ldw	fp,0(sp)
    19d4:	dec00204 	addi	sp,sp,8
    19d8:	f800283a 	ret

000019dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    19dc:	defffa04 	addi	sp,sp,-24
    19e0:	dfc00515 	stw	ra,20(sp)
    19e4:	df000415 	stw	fp,16(sp)
    19e8:	df000404 	addi	fp,sp,16
    19ec:	e13ffd15 	stw	r4,-12(fp)
    19f0:	e17ffe15 	stw	r5,-8(fp)
    19f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    19f8:	e0fffd17 	ldw	r3,-12(fp)
    19fc:	00800044 	movi	r2,1
    1a00:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1a04:	e0bffd17 	ldw	r2,-12(fp)
    1a08:	10800017 	ldw	r2,0(r2)
    1a0c:	11000104 	addi	r4,r2,4
    1a10:	e0bffd17 	ldw	r2,-12(fp)
    1a14:	10800817 	ldw	r2,32(r2)
    1a18:	1007883a 	mov	r3,r2
    1a1c:	2005883a 	mov	r2,r4
    1a20:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    1a24:	e13ffe17 	ldw	r4,-8(fp)
    1a28:	e17fff17 	ldw	r5,-4(fp)
    1a2c:	d8000015 	stw	zero,0(sp)
    1a30:	01800034 	movhi	r6,0
    1a34:	3186a704 	addi	r6,r6,6812
    1a38:	e1fffd17 	ldw	r7,-12(fp)
    1a3c:	0002a900 	call	2a90 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1a40:	e0bffd17 	ldw	r2,-12(fp)
    1a44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1a48:	e0bffd17 	ldw	r2,-12(fp)
    1a4c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1a50:	00800034 	movhi	r2,0
    1a54:	109c1f04 	addi	r2,r2,28796
    1a58:	10800017 	ldw	r2,0(r2)
    1a5c:	100b883a 	mov	r5,r2
    1a60:	01800034 	movhi	r6,0
    1a64:	31873104 	addi	r6,r6,7364
    1a68:	e1fffd17 	ldw	r7,-12(fp)
    1a6c:	00024400 	call	2440 <alt_alarm_start>
    1a70:	1004403a 	cmpge	r2,r2,zero
    1a74:	1000041e 	bne	r2,zero,1a88 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1a78:	e0fffd17 	ldw	r3,-12(fp)
    1a7c:	00a00034 	movhi	r2,32768
    1a80:	10bfffc4 	addi	r2,r2,-1
    1a84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    1a88:	e037883a 	mov	sp,fp
    1a8c:	dfc00117 	ldw	ra,4(sp)
    1a90:	df000017 	ldw	fp,0(sp)
    1a94:	dec00204 	addi	sp,sp,8
    1a98:	f800283a 	ret

00001a9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    1a9c:	defff804 	addi	sp,sp,-32
    1aa0:	df000715 	stw	fp,28(sp)
    1aa4:	df000704 	addi	fp,sp,28
    1aa8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    1aac:	e0bfff17 	ldw	r2,-4(fp)
    1ab0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    1ab4:	e0bffe17 	ldw	r2,-8(fp)
    1ab8:	10800017 	ldw	r2,0(r2)
    1abc:	e0bffd15 	stw	r2,-12(fp)
    1ac0:	00000006 	br	1ac4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1ac4:	e0bffd17 	ldw	r2,-12(fp)
    1ac8:	10800104 	addi	r2,r2,4
    1acc:	10800037 	ldwio	r2,0(r2)
    1ad0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1ad4:	e0bffc17 	ldw	r2,-16(fp)
    1ad8:	1080c00c 	andi	r2,r2,768
    1adc:	1005003a 	cmpeq	r2,r2,zero
    1ae0:	1000741e 	bne	r2,zero,1cb4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    1ae4:	e0bffc17 	ldw	r2,-16(fp)
    1ae8:	1080400c 	andi	r2,r2,256
    1aec:	1005003a 	cmpeq	r2,r2,zero
    1af0:	1000351e 	bne	r2,zero,1bc8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    1af4:	00800074 	movhi	r2,1
    1af8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1afc:	e0bffe17 	ldw	r2,-8(fp)
    1b00:	10800a17 	ldw	r2,40(r2)
    1b04:	10800044 	addi	r2,r2,1
    1b08:	1081ffcc 	andi	r2,r2,2047
    1b0c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    1b10:	e0bffe17 	ldw	r2,-8(fp)
    1b14:	10c00b17 	ldw	r3,44(r2)
    1b18:	e0bffa17 	ldw	r2,-24(fp)
    1b1c:	18801626 	beq	r3,r2,1b78 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1b20:	e0bffd17 	ldw	r2,-12(fp)
    1b24:	10800037 	ldwio	r2,0(r2)
    1b28:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1b2c:	e0bffb17 	ldw	r2,-20(fp)
    1b30:	10a0000c 	andi	r2,r2,32768
    1b34:	1005003a 	cmpeq	r2,r2,zero
    1b38:	10000f1e 	bne	r2,zero,1b78 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1b3c:	e0bffe17 	ldw	r2,-8(fp)
    1b40:	10c00a17 	ldw	r3,40(r2)
    1b44:	e0bffb17 	ldw	r2,-20(fp)
    1b48:	1009883a 	mov	r4,r2
    1b4c:	e0bffe17 	ldw	r2,-8(fp)
    1b50:	1885883a 	add	r2,r3,r2
    1b54:	10800e04 	addi	r2,r2,56
    1b58:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1b5c:	e0bffe17 	ldw	r2,-8(fp)
    1b60:	10800a17 	ldw	r2,40(r2)
    1b64:	10800044 	addi	r2,r2,1
    1b68:	10c1ffcc 	andi	r3,r2,2047
    1b6c:	e0bffe17 	ldw	r2,-8(fp)
    1b70:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    1b74:	003fe106 	br	1afc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1b78:	e0bffb17 	ldw	r2,-20(fp)
    1b7c:	10bfffec 	andhi	r2,r2,65535
    1b80:	1005003a 	cmpeq	r2,r2,zero
    1b84:	1000101e 	bne	r2,zero,1bc8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1b88:	e0bffe17 	ldw	r2,-8(fp)
    1b8c:	10c00817 	ldw	r3,32(r2)
    1b90:	00bfff84 	movi	r2,-2
    1b94:	1886703a 	and	r3,r3,r2
    1b98:	e0bffe17 	ldw	r2,-8(fp)
    1b9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1ba0:	e0bffd17 	ldw	r2,-12(fp)
    1ba4:	11000104 	addi	r4,r2,4
    1ba8:	e0bffe17 	ldw	r2,-8(fp)
    1bac:	10800817 	ldw	r2,32(r2)
    1bb0:	1007883a 	mov	r3,r2
    1bb4:	2005883a 	mov	r2,r4
    1bb8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1bbc:	e0bffd17 	ldw	r2,-12(fp)
    1bc0:	10800104 	addi	r2,r2,4
    1bc4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1bc8:	e0bffc17 	ldw	r2,-16(fp)
    1bcc:	1080800c 	andi	r2,r2,512
    1bd0:	1005003a 	cmpeq	r2,r2,zero
    1bd4:	103fbb1e 	bne	r2,zero,1ac4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1bd8:	e0bffc17 	ldw	r2,-16(fp)
    1bdc:	10bfffec 	andhi	r2,r2,65535
    1be0:	1004d43a 	srli	r2,r2,16
    1be4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1be8:	00001506 	br	1c40 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1bec:	e13ffd17 	ldw	r4,-12(fp)
    1bf0:	e0bffe17 	ldw	r2,-8(fp)
    1bf4:	10c00d17 	ldw	r3,52(r2)
    1bf8:	e0bffe17 	ldw	r2,-8(fp)
    1bfc:	1885883a 	add	r2,r3,r2
    1c00:	10820e04 	addi	r2,r2,2104
    1c04:	10800003 	ldbu	r2,0(r2)
    1c08:	10c03fcc 	andi	r3,r2,255
    1c0c:	18c0201c 	xori	r3,r3,128
    1c10:	18ffe004 	addi	r3,r3,-128
    1c14:	2005883a 	mov	r2,r4
    1c18:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1c1c:	e0bffe17 	ldw	r2,-8(fp)
    1c20:	10800d17 	ldw	r2,52(r2)
    1c24:	10800044 	addi	r2,r2,1
    1c28:	10c1ffcc 	andi	r3,r2,2047
    1c2c:	e0bffe17 	ldw	r2,-8(fp)
    1c30:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    1c34:	e0bff917 	ldw	r2,-28(fp)
    1c38:	10bfffc4 	addi	r2,r2,-1
    1c3c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1c40:	e0bff917 	ldw	r2,-28(fp)
    1c44:	1005003a 	cmpeq	r2,r2,zero
    1c48:	1000051e 	bne	r2,zero,1c60 <altera_avalon_jtag_uart_irq+0x1c4>
    1c4c:	e0bffe17 	ldw	r2,-8(fp)
    1c50:	10c00d17 	ldw	r3,52(r2)
    1c54:	e0bffe17 	ldw	r2,-8(fp)
    1c58:	10800c17 	ldw	r2,48(r2)
    1c5c:	18bfe31e 	bne	r3,r2,1bec <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    1c60:	e0bff917 	ldw	r2,-28(fp)
    1c64:	1005003a 	cmpeq	r2,r2,zero
    1c68:	103f961e 	bne	r2,zero,1ac4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1c6c:	e0bffe17 	ldw	r2,-8(fp)
    1c70:	10c00817 	ldw	r3,32(r2)
    1c74:	00bfff44 	movi	r2,-3
    1c78:	1886703a 	and	r3,r3,r2
    1c7c:	e0bffe17 	ldw	r2,-8(fp)
    1c80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1c84:	e0bffe17 	ldw	r2,-8(fp)
    1c88:	10800017 	ldw	r2,0(r2)
    1c8c:	11000104 	addi	r4,r2,4
    1c90:	e0bffe17 	ldw	r2,-8(fp)
    1c94:	10800817 	ldw	r2,32(r2)
    1c98:	1007883a 	mov	r3,r2
    1c9c:	2005883a 	mov	r2,r4
    1ca0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1ca4:	e0bffd17 	ldw	r2,-12(fp)
    1ca8:	10800104 	addi	r2,r2,4
    1cac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1cb0:	003f8406 	br	1ac4 <altera_avalon_jtag_uart_irq+0x28>
}
    1cb4:	e037883a 	mov	sp,fp
    1cb8:	df000017 	ldw	fp,0(sp)
    1cbc:	dec00104 	addi	sp,sp,4
    1cc0:	f800283a 	ret

00001cc4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1cc4:	defffc04 	addi	sp,sp,-16
    1cc8:	df000315 	stw	fp,12(sp)
    1ccc:	df000304 	addi	fp,sp,12
    1cd0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1cd4:	e0bfff17 	ldw	r2,-4(fp)
    1cd8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1cdc:	e0bffe17 	ldw	r2,-8(fp)
    1ce0:	10800017 	ldw	r2,0(r2)
    1ce4:	10800104 	addi	r2,r2,4
    1ce8:	10800037 	ldwio	r2,0(r2)
    1cec:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1cf0:	e0bffd17 	ldw	r2,-12(fp)
    1cf4:	1081000c 	andi	r2,r2,1024
    1cf8:	1005003a 	cmpeq	r2,r2,zero
    1cfc:	10000c1e 	bne	r2,zero,1d30 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10800017 	ldw	r2,0(r2)
    1d08:	11000104 	addi	r4,r2,4
    1d0c:	e0bffe17 	ldw	r2,-8(fp)
    1d10:	10800817 	ldw	r2,32(r2)
    1d14:	10810014 	ori	r2,r2,1024
    1d18:	1007883a 	mov	r3,r2
    1d1c:	2005883a 	mov	r2,r4
    1d20:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    1d24:	e0bffe17 	ldw	r2,-8(fp)
    1d28:	10000915 	stw	zero,36(r2)
    1d2c:	00000a06 	br	1d58 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1d30:	e0bffe17 	ldw	r2,-8(fp)
    1d34:	10c00917 	ldw	r3,36(r2)
    1d38:	00a00034 	movhi	r2,32768
    1d3c:	10bfff04 	addi	r2,r2,-4
    1d40:	10c00536 	bltu	r2,r3,1d58 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    1d44:	e0bffe17 	ldw	r2,-8(fp)
    1d48:	10800917 	ldw	r2,36(r2)
    1d4c:	10c00044 	addi	r3,r2,1
    1d50:	e0bffe17 	ldw	r2,-8(fp)
    1d54:	10c00915 	stw	r3,36(r2)
    1d58:	00800034 	movhi	r2,0
    1d5c:	109c1f04 	addi	r2,r2,28796
    1d60:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1d64:	e037883a 	mov	sp,fp
    1d68:	df000017 	ldw	fp,0(sp)
    1d6c:	dec00104 	addi	sp,sp,4
    1d70:	f800283a 	ret

00001d74 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    1d74:	defffc04 	addi	sp,sp,-16
    1d78:	df000315 	stw	fp,12(sp)
    1d7c:	df000304 	addi	fp,sp,12
    1d80:	e13ffd15 	stw	r4,-12(fp)
    1d84:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1d88:	00000706 	br	1da8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    1d8c:	e0bffe17 	ldw	r2,-8(fp)
    1d90:	1090000c 	andi	r2,r2,16384
    1d94:	1005003a 	cmpeq	r2,r2,zero
    1d98:	1000031e 	bne	r2,zero,1da8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    1d9c:	00bffd44 	movi	r2,-11
    1da0:	e0bfff15 	stw	r2,-4(fp)
    1da4:	00000b06 	br	1dd4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1da8:	e0bffd17 	ldw	r2,-12(fp)
    1dac:	10c00d17 	ldw	r3,52(r2)
    1db0:	e0bffd17 	ldw	r2,-12(fp)
    1db4:	10800c17 	ldw	r2,48(r2)
    1db8:	18800526 	beq	r3,r2,1dd0 <altera_avalon_jtag_uart_close+0x5c>
    1dbc:	e0bffd17 	ldw	r2,-12(fp)
    1dc0:	10c00917 	ldw	r3,36(r2)
    1dc4:	e0bffd17 	ldw	r2,-12(fp)
    1dc8:	10800117 	ldw	r2,4(r2)
    1dcc:	18bfef36 	bltu	r3,r2,1d8c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1dd0:	e03fff15 	stw	zero,-4(fp)
    1dd4:	e0bfff17 	ldw	r2,-4(fp)
}
    1dd8:	e037883a 	mov	sp,fp
    1ddc:	df000017 	ldw	fp,0(sp)
    1de0:	dec00104 	addi	sp,sp,4
    1de4:	f800283a 	ret

00001de8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1de8:	defff804 	addi	sp,sp,-32
    1dec:	df000715 	stw	fp,28(sp)
    1df0:	df000704 	addi	fp,sp,28
    1df4:	e13ffb15 	stw	r4,-20(fp)
    1df8:	e17ffc15 	stw	r5,-16(fp)
    1dfc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    1e00:	00bff9c4 	movi	r2,-25
    1e04:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    1e08:	e0bffc17 	ldw	r2,-16(fp)
    1e0c:	e0bfff15 	stw	r2,-4(fp)
    1e10:	e0ffff17 	ldw	r3,-4(fp)
    1e14:	189a8060 	cmpeqi	r2,r3,27137
    1e18:	1000041e 	bne	r2,zero,1e2c <altera_avalon_jtag_uart_ioctl+0x44>
    1e1c:	e0ffff17 	ldw	r3,-4(fp)
    1e20:	189a80a0 	cmpeqi	r2,r3,27138
    1e24:	10001b1e 	bne	r2,zero,1e94 <altera_avalon_jtag_uart_ioctl+0xac>
    1e28:	00002706 	br	1ec8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1e2c:	e0bffb17 	ldw	r2,-20(fp)
    1e30:	10c00117 	ldw	r3,4(r2)
    1e34:	00a00034 	movhi	r2,32768
    1e38:	10bfffc4 	addi	r2,r2,-1
    1e3c:	18802226 	beq	r3,r2,1ec8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    1e40:	e0bffd17 	ldw	r2,-12(fp)
    1e44:	10800017 	ldw	r2,0(r2)
    1e48:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1e4c:	e0bff917 	ldw	r2,-28(fp)
    1e50:	10800090 	cmplti	r2,r2,2
    1e54:	1000071e 	bne	r2,zero,1e74 <altera_avalon_jtag_uart_ioctl+0x8c>
    1e58:	e0fff917 	ldw	r3,-28(fp)
    1e5c:	00a00034 	movhi	r2,32768
    1e60:	10bfffc4 	addi	r2,r2,-1
    1e64:	18800326 	beq	r3,r2,1e74 <altera_avalon_jtag_uart_ioctl+0x8c>
    1e68:	e0bff917 	ldw	r2,-28(fp)
    1e6c:	e0bffe15 	stw	r2,-8(fp)
    1e70:	00000306 	br	1e80 <altera_avalon_jtag_uart_ioctl+0x98>
    1e74:	00e00034 	movhi	r3,32768
    1e78:	18ffff84 	addi	r3,r3,-2
    1e7c:	e0fffe15 	stw	r3,-8(fp)
    1e80:	e0bffb17 	ldw	r2,-20(fp)
    1e84:	e0fffe17 	ldw	r3,-8(fp)
    1e88:	10c00115 	stw	r3,4(r2)
      rc = 0;
    1e8c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    1e90:	00000d06 	br	1ec8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    1e94:	e0bffb17 	ldw	r2,-20(fp)
    1e98:	10c00117 	ldw	r3,4(r2)
    1e9c:	00a00034 	movhi	r2,32768
    1ea0:	10bfffc4 	addi	r2,r2,-1
    1ea4:	18800826 	beq	r3,r2,1ec8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1ea8:	e13ffd17 	ldw	r4,-12(fp)
    1eac:	e0bffb17 	ldw	r2,-20(fp)
    1eb0:	10c00917 	ldw	r3,36(r2)
    1eb4:	e0bffb17 	ldw	r2,-20(fp)
    1eb8:	10800117 	ldw	r2,4(r2)
    1ebc:	1885803a 	cmpltu	r2,r3,r2
    1ec0:	20800015 	stw	r2,0(r4)
      rc = 0;
    1ec4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    1ec8:	e0bffa17 	ldw	r2,-24(fp)
}
    1ecc:	e037883a 	mov	sp,fp
    1ed0:	df000017 	ldw	fp,0(sp)
    1ed4:	dec00104 	addi	sp,sp,4
    1ed8:	f800283a 	ret

00001edc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1edc:	defff204 	addi	sp,sp,-56
    1ee0:	dfc00d15 	stw	ra,52(sp)
    1ee4:	df000c15 	stw	fp,48(sp)
    1ee8:	df000c04 	addi	fp,sp,48
    1eec:	e13ffb15 	stw	r4,-20(fp)
    1ef0:	e17ffc15 	stw	r5,-16(fp)
    1ef4:	e1bffd15 	stw	r6,-12(fp)
    1ef8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    1efc:	e0bffc17 	ldw	r2,-16(fp)
    1f00:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1f04:	00004806 	br	2028 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1f08:	e0bffb17 	ldw	r2,-20(fp)
    1f0c:	10800a17 	ldw	r2,40(r2)
    1f10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1f14:	e0bffb17 	ldw	r2,-20(fp)
    1f18:	10800b17 	ldw	r2,44(r2)
    1f1c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    1f20:	e0fff717 	ldw	r3,-36(fp)
    1f24:	e0bff617 	ldw	r2,-40(fp)
    1f28:	18800536 	bltu	r3,r2,1f40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1f2c:	e0bff717 	ldw	r2,-36(fp)
    1f30:	e0fff617 	ldw	r3,-40(fp)
    1f34:	10c5c83a 	sub	r2,r2,r3
    1f38:	e0bff815 	stw	r2,-32(fp)
    1f3c:	00000406 	br	1f50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1f40:	00820004 	movi	r2,2048
    1f44:	e0fff617 	ldw	r3,-40(fp)
    1f48:	10c5c83a 	sub	r2,r2,r3
    1f4c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    1f50:	e0bff817 	ldw	r2,-32(fp)
    1f54:	1005003a 	cmpeq	r2,r2,zero
    1f58:	10001f1e 	bne	r2,zero,1fd8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    1f5c:	e0fffd17 	ldw	r3,-12(fp)
    1f60:	e0bff817 	ldw	r2,-32(fp)
    1f64:	1880022e 	bgeu	r3,r2,1f70 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    1f68:	e0bffd17 	ldw	r2,-12(fp)
    1f6c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    1f70:	e0bffb17 	ldw	r2,-20(fp)
    1f74:	10c00e04 	addi	r3,r2,56
    1f78:	e0bff617 	ldw	r2,-40(fp)
    1f7c:	1887883a 	add	r3,r3,r2
    1f80:	e0bffa17 	ldw	r2,-24(fp)
    1f84:	1009883a 	mov	r4,r2
    1f88:	180b883a 	mov	r5,r3
    1f8c:	e1bff817 	ldw	r6,-32(fp)
    1f90:	000373c0 	call	373c <memcpy>
      ptr   += n;
    1f94:	e0fff817 	ldw	r3,-32(fp)
    1f98:	e0bffa17 	ldw	r2,-24(fp)
    1f9c:	10c5883a 	add	r2,r2,r3
    1fa0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    1fa4:	e0fffd17 	ldw	r3,-12(fp)
    1fa8:	e0bff817 	ldw	r2,-32(fp)
    1fac:	1885c83a 	sub	r2,r3,r2
    1fb0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1fb4:	e0fff617 	ldw	r3,-40(fp)
    1fb8:	e0bff817 	ldw	r2,-32(fp)
    1fbc:	1885883a 	add	r2,r3,r2
    1fc0:	10c1ffcc 	andi	r3,r2,2047
    1fc4:	e0bffb17 	ldw	r2,-20(fp)
    1fc8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1fcc:	e0bffd17 	ldw	r2,-12(fp)
    1fd0:	10800048 	cmpgei	r2,r2,1
    1fd4:	103fcc1e 	bne	r2,zero,1f08 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    1fd8:	e0fffa17 	ldw	r3,-24(fp)
    1fdc:	e0bffc17 	ldw	r2,-16(fp)
    1fe0:	1880141e 	bne	r3,r2,2034 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1fe4:	e0bffe17 	ldw	r2,-8(fp)
    1fe8:	1090000c 	andi	r2,r2,16384
    1fec:	1004c03a 	cmpne	r2,r2,zero
    1ff0:	1000101e 	bne	r2,zero,2034 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1ff4:	e0bffb17 	ldw	r2,-20(fp)
    1ff8:	10c00a17 	ldw	r3,40(r2)
    1ffc:	e0bff717 	ldw	r2,-36(fp)
    2000:	1880051e 	bne	r3,r2,2018 <altera_avalon_jtag_uart_read+0x13c>
    2004:	e0bffb17 	ldw	r2,-20(fp)
    2008:	10c00917 	ldw	r3,36(r2)
    200c:	e0bffb17 	ldw	r2,-20(fp)
    2010:	10800117 	ldw	r2,4(r2)
    2014:	18bff736 	bltu	r3,r2,1ff4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    2018:	e0bffb17 	ldw	r2,-20(fp)
    201c:	10c00a17 	ldw	r3,40(r2)
    2020:	e0bff717 	ldw	r2,-36(fp)
    2024:	18800326 	beq	r3,r2,2034 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    2028:	e0bffd17 	ldw	r2,-12(fp)
    202c:	10800048 	cmpgei	r2,r2,1
    2030:	103fb51e 	bne	r2,zero,1f08 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    2034:	e0fffa17 	ldw	r3,-24(fp)
    2038:	e0bffc17 	ldw	r2,-16(fp)
    203c:	18801926 	beq	r3,r2,20a4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2040:	0005303a 	rdctl	r2,status
    2044:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2048:	e0fff517 	ldw	r3,-44(fp)
    204c:	00bfff84 	movi	r2,-2
    2050:	1884703a 	and	r2,r3,r2
    2054:	1001703a 	wrctl	status,r2
  
  return context;
    2058:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    205c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2060:	e0bffb17 	ldw	r2,-20(fp)
    2064:	10800817 	ldw	r2,32(r2)
    2068:	10c00054 	ori	r3,r2,1
    206c:	e0bffb17 	ldw	r2,-20(fp)
    2070:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2074:	e0bffb17 	ldw	r2,-20(fp)
    2078:	10800017 	ldw	r2,0(r2)
    207c:	11000104 	addi	r4,r2,4
    2080:	e0bffb17 	ldw	r2,-20(fp)
    2084:	10800817 	ldw	r2,32(r2)
    2088:	1007883a 	mov	r3,r2
    208c:	2005883a 	mov	r2,r4
    2090:	10c00035 	stwio	r3,0(r2)
    2094:	e0bff917 	ldw	r2,-28(fp)
    2098:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    209c:	e0bff417 	ldw	r2,-48(fp)
    20a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    20a4:	e0fffa17 	ldw	r3,-24(fp)
    20a8:	e0bffc17 	ldw	r2,-16(fp)
    20ac:	18800526 	beq	r3,r2,20c4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    20b0:	e0fffa17 	ldw	r3,-24(fp)
    20b4:	e0bffc17 	ldw	r2,-16(fp)
    20b8:	1887c83a 	sub	r3,r3,r2
    20bc:	e0ffff15 	stw	r3,-4(fp)
    20c0:	00000906 	br	20e8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    20c4:	e0bffe17 	ldw	r2,-8(fp)
    20c8:	1090000c 	andi	r2,r2,16384
    20cc:	1005003a 	cmpeq	r2,r2,zero
    20d0:	1000031e 	bne	r2,zero,20e0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    20d4:	00bffd44 	movi	r2,-11
    20d8:	e0bfff15 	stw	r2,-4(fp)
    20dc:	00000206 	br	20e8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    20e0:	00bffec4 	movi	r2,-5
    20e4:	e0bfff15 	stw	r2,-4(fp)
    20e8:	e0bfff17 	ldw	r2,-4(fp)
}
    20ec:	e037883a 	mov	sp,fp
    20f0:	dfc00117 	ldw	ra,4(sp)
    20f4:	df000017 	ldw	fp,0(sp)
    20f8:	dec00204 	addi	sp,sp,8
    20fc:	f800283a 	ret

00002100 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2100:	defff204 	addi	sp,sp,-56
    2104:	dfc00d15 	stw	ra,52(sp)
    2108:	df000c15 	stw	fp,48(sp)
    210c:	df000c04 	addi	fp,sp,48
    2110:	e13ffb15 	stw	r4,-20(fp)
    2114:	e17ffc15 	stw	r5,-16(fp)
    2118:	e1bffd15 	stw	r6,-12(fp)
    211c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    2120:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    2124:	e0bffc17 	ldw	r2,-16(fp)
    2128:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    212c:	00003a06 	br	2218 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    2130:	e0bffb17 	ldw	r2,-20(fp)
    2134:	10800c17 	ldw	r2,48(r2)
    2138:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    213c:	e0bffb17 	ldw	r2,-20(fp)
    2140:	10800d17 	ldw	r2,52(r2)
    2144:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    2148:	e0fffa17 	ldw	r3,-24(fp)
    214c:	e0bff917 	ldw	r2,-28(fp)
    2150:	1880062e 	bgeu	r3,r2,216c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    2154:	e0fff917 	ldw	r3,-28(fp)
    2158:	e0bffa17 	ldw	r2,-24(fp)
    215c:	1885c83a 	sub	r2,r3,r2
    2160:	10bfffc4 	addi	r2,r2,-1
    2164:	e0bff815 	stw	r2,-32(fp)
    2168:	00000c06 	br	219c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    216c:	e0bff917 	ldw	r2,-28(fp)
    2170:	1005003a 	cmpeq	r2,r2,zero
    2174:	1000051e 	bne	r2,zero,218c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    2178:	00820004 	movi	r2,2048
    217c:	e0fffa17 	ldw	r3,-24(fp)
    2180:	10c5c83a 	sub	r2,r2,r3
    2184:	e0bff815 	stw	r2,-32(fp)
    2188:	00000406 	br	219c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    218c:	0081ffc4 	movi	r2,2047
    2190:	e0fffa17 	ldw	r3,-24(fp)
    2194:	10c5c83a 	sub	r2,r2,r3
    2198:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    219c:	e0bff817 	ldw	r2,-32(fp)
    21a0:	1005003a 	cmpeq	r2,r2,zero
    21a4:	10001f1e 	bne	r2,zero,2224 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    21a8:	e0fffd17 	ldw	r3,-12(fp)
    21ac:	e0bff817 	ldw	r2,-32(fp)
    21b0:	1880022e 	bgeu	r3,r2,21bc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    21b4:	e0bffd17 	ldw	r2,-12(fp)
    21b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    21bc:	e0bffb17 	ldw	r2,-20(fp)
    21c0:	10c20e04 	addi	r3,r2,2104
    21c4:	e0bffa17 	ldw	r2,-24(fp)
    21c8:	1885883a 	add	r2,r3,r2
    21cc:	e0fffc17 	ldw	r3,-16(fp)
    21d0:	1009883a 	mov	r4,r2
    21d4:	180b883a 	mov	r5,r3
    21d8:	e1bff817 	ldw	r6,-32(fp)
    21dc:	000373c0 	call	373c <memcpy>
      ptr   += n;
    21e0:	e0fff817 	ldw	r3,-32(fp)
    21e4:	e0bffc17 	ldw	r2,-16(fp)
    21e8:	10c5883a 	add	r2,r2,r3
    21ec:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    21f0:	e0fffd17 	ldw	r3,-12(fp)
    21f4:	e0bff817 	ldw	r2,-32(fp)
    21f8:	1885c83a 	sub	r2,r3,r2
    21fc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2200:	e0fffa17 	ldw	r3,-24(fp)
    2204:	e0bff817 	ldw	r2,-32(fp)
    2208:	1885883a 	add	r2,r3,r2
    220c:	10c1ffcc 	andi	r3,r2,2047
    2210:	e0bffb17 	ldw	r2,-20(fp)
    2214:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2218:	e0bffd17 	ldw	r2,-12(fp)
    221c:	10800048 	cmpgei	r2,r2,1
    2220:	103fc31e 	bne	r2,zero,2130 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2224:	0005303a 	rdctl	r2,status
    2228:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    222c:	e0fff517 	ldw	r3,-44(fp)
    2230:	00bfff84 	movi	r2,-2
    2234:	1884703a 	and	r2,r3,r2
    2238:	1001703a 	wrctl	status,r2
  
  return context;
    223c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    2240:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2244:	e0bffb17 	ldw	r2,-20(fp)
    2248:	10800817 	ldw	r2,32(r2)
    224c:	10c00094 	ori	r3,r2,2
    2250:	e0bffb17 	ldw	r2,-20(fp)
    2254:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2258:	e0bffb17 	ldw	r2,-20(fp)
    225c:	10800017 	ldw	r2,0(r2)
    2260:	11000104 	addi	r4,r2,4
    2264:	e0bffb17 	ldw	r2,-20(fp)
    2268:	10800817 	ldw	r2,32(r2)
    226c:	1007883a 	mov	r3,r2
    2270:	2005883a 	mov	r2,r4
    2274:	10c00035 	stwio	r3,0(r2)
    2278:	e0bff717 	ldw	r2,-36(fp)
    227c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2280:	e0bff417 	ldw	r2,-48(fp)
    2284:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    2288:	e0bffd17 	ldw	r2,-12(fp)
    228c:	10800050 	cmplti	r2,r2,1
    2290:	1000111e 	bne	r2,zero,22d8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    2294:	e0bffe17 	ldw	r2,-8(fp)
    2298:	1090000c 	andi	r2,r2,16384
    229c:	1004c03a 	cmpne	r2,r2,zero
    22a0:	1000101e 	bne	r2,zero,22e4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    22a4:	e0bffb17 	ldw	r2,-20(fp)
    22a8:	10c00d17 	ldw	r3,52(r2)
    22ac:	e0bff917 	ldw	r2,-28(fp)
    22b0:	1880051e 	bne	r3,r2,22c8 <altera_avalon_jtag_uart_write+0x1c8>
    22b4:	e0bffb17 	ldw	r2,-20(fp)
    22b8:	10c00917 	ldw	r3,36(r2)
    22bc:	e0bffb17 	ldw	r2,-20(fp)
    22c0:	10800117 	ldw	r2,4(r2)
    22c4:	18bff736 	bltu	r3,r2,22a4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    22c8:	e0bffb17 	ldw	r2,-20(fp)
    22cc:	10c00d17 	ldw	r3,52(r2)
    22d0:	e0bff917 	ldw	r2,-28(fp)
    22d4:	18800326 	beq	r3,r2,22e4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    22d8:	e0bffd17 	ldw	r2,-12(fp)
    22dc:	10800048 	cmpgei	r2,r2,1
    22e0:	103fcd1e 	bne	r2,zero,2218 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    22e4:	e0fffc17 	ldw	r3,-16(fp)
    22e8:	e0bff617 	ldw	r2,-40(fp)
    22ec:	18800526 	beq	r3,r2,2304 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    22f0:	e0fffc17 	ldw	r3,-16(fp)
    22f4:	e0bff617 	ldw	r2,-40(fp)
    22f8:	1887c83a 	sub	r3,r3,r2
    22fc:	e0ffff15 	stw	r3,-4(fp)
    2300:	00000906 	br	2328 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    2304:	e0bffe17 	ldw	r2,-8(fp)
    2308:	1090000c 	andi	r2,r2,16384
    230c:	1005003a 	cmpeq	r2,r2,zero
    2310:	1000031e 	bne	r2,zero,2320 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    2314:	00bffd44 	movi	r2,-11
    2318:	e0bfff15 	stw	r2,-4(fp)
    231c:	00000206 	br	2328 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    2320:	00bffec4 	movi	r2,-5
    2324:	e0bfff15 	stw	r2,-4(fp)
    2328:	e0bfff17 	ldw	r2,-4(fp)
}
    232c:	e037883a 	mov	sp,fp
    2330:	dfc00117 	ldw	ra,4(sp)
    2334:	df000017 	ldw	fp,0(sp)
    2338:	dec00204 	addi	sp,sp,8
    233c:	f800283a 	ret

00002340 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    2340:	defffa04 	addi	sp,sp,-24
    2344:	dfc00515 	stw	ra,20(sp)
    2348:	df000415 	stw	fp,16(sp)
    234c:	df000404 	addi	fp,sp,16
    2350:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    2354:	e0bfff17 	ldw	r2,-4(fp)
    2358:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    235c:	e0bfff17 	ldw	r2,-4(fp)
    2360:	10800104 	addi	r2,r2,4
    2364:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2368:	0005303a 	rdctl	r2,status
    236c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2370:	e0fffd17 	ldw	r3,-12(fp)
    2374:	00bfff84 	movi	r2,-2
    2378:	1884703a 	and	r2,r3,r2
    237c:	1001703a 	wrctl	status,r2
  
  return context;
    2380:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    2384:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    2388:	00032540 	call	3254 <alt_tick>
    238c:	e0bffe17 	ldw	r2,-8(fp)
    2390:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2394:	e0bffc17 	ldw	r2,-16(fp)
    2398:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    239c:	e037883a 	mov	sp,fp
    23a0:	dfc00117 	ldw	ra,4(sp)
    23a4:	df000017 	ldw	fp,0(sp)
    23a8:	dec00204 	addi	sp,sp,8
    23ac:	f800283a 	ret

000023b0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    23b0:	defff804 	addi	sp,sp,-32
    23b4:	dfc00715 	stw	ra,28(sp)
    23b8:	df000615 	stw	fp,24(sp)
    23bc:	df000604 	addi	fp,sp,24
    23c0:	e13ffc15 	stw	r4,-16(fp)
    23c4:	e17ffd15 	stw	r5,-12(fp)
    23c8:	e1bffe15 	stw	r6,-8(fp)
    23cc:	e1ffff15 	stw	r7,-4(fp)
    23d0:	e0bfff17 	ldw	r2,-4(fp)
    23d4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    23d8:	00800034 	movhi	r2,0
    23dc:	109c1f04 	addi	r2,r2,28796
    23e0:	10800017 	ldw	r2,0(r2)
    23e4:	1004c03a 	cmpne	r2,r2,zero
    23e8:	1000041e 	bne	r2,zero,23fc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    23ec:	00c00034 	movhi	r3,0
    23f0:	18dc1f04 	addi	r3,r3,28796
    23f4:	e0bffb17 	ldw	r2,-20(fp)
    23f8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    23fc:	e0bffc17 	ldw	r2,-16(fp)
    2400:	10800104 	addi	r2,r2,4
    2404:	1007883a 	mov	r3,r2
    2408:	008001c4 	movi	r2,7
    240c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    2410:	d8000015 	stw	zero,0(sp)
    2414:	e13ffd17 	ldw	r4,-12(fp)
    2418:	e17ffe17 	ldw	r5,-8(fp)
    241c:	01800034 	movhi	r6,0
    2420:	3188d004 	addi	r6,r6,9024
    2424:	e1fffc17 	ldw	r7,-16(fp)
    2428:	0002a900 	call	2a90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    242c:	e037883a 	mov	sp,fp
    2430:	dfc00117 	ldw	ra,4(sp)
    2434:	df000017 	ldw	fp,0(sp)
    2438:	dec00204 	addi	sp,sp,8
    243c:	f800283a 	ret

00002440 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    2440:	defff404 	addi	sp,sp,-48
    2444:	df000b15 	stw	fp,44(sp)
    2448:	df000b04 	addi	fp,sp,44
    244c:	e13ffb15 	stw	r4,-20(fp)
    2450:	e17ffc15 	stw	r5,-16(fp)
    2454:	e1bffd15 	stw	r6,-12(fp)
    2458:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    245c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2460:	00800034 	movhi	r2,0
    2464:	109c1f04 	addi	r2,r2,28796
    2468:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    246c:	1005003a 	cmpeq	r2,r2,zero
    2470:	1000411e 	bne	r2,zero,2578 <alt_alarm_start+0x138>
  {
    if (alarm)
    2474:	e0bffb17 	ldw	r2,-20(fp)
    2478:	1005003a 	cmpeq	r2,r2,zero
    247c:	10003b1e 	bne	r2,zero,256c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    2480:	e0fffb17 	ldw	r3,-20(fp)
    2484:	e0bffd17 	ldw	r2,-12(fp)
    2488:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    248c:	e0fffb17 	ldw	r3,-20(fp)
    2490:	e0bffe17 	ldw	r2,-8(fp)
    2494:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2498:	0005303a 	rdctl	r2,status
    249c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    24a0:	e0fff817 	ldw	r3,-32(fp)
    24a4:	00bfff84 	movi	r2,-2
    24a8:	1884703a 	and	r2,r3,r2
    24ac:	1001703a 	wrctl	status,r2
  
  return context;
    24b0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    24b4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    24b8:	00800034 	movhi	r2,0
    24bc:	109c2004 	addi	r2,r2,28800
    24c0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    24c4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    24c8:	e0fffc17 	ldw	r3,-16(fp)
    24cc:	e0bff917 	ldw	r2,-28(fp)
    24d0:	1885883a 	add	r2,r3,r2
    24d4:	10c00044 	addi	r3,r2,1
    24d8:	e0bffb17 	ldw	r2,-20(fp)
    24dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    24e0:	e0bffb17 	ldw	r2,-20(fp)
    24e4:	10c00217 	ldw	r3,8(r2)
    24e8:	e0bff917 	ldw	r2,-28(fp)
    24ec:	1880042e 	bgeu	r3,r2,2500 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    24f0:	e0fffb17 	ldw	r3,-20(fp)
    24f4:	00800044 	movi	r2,1
    24f8:	18800405 	stb	r2,16(r3)
    24fc:	00000206 	br	2508 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    2500:	e0bffb17 	ldw	r2,-20(fp)
    2504:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    2508:	e0fffb17 	ldw	r3,-20(fp)
    250c:	00800034 	movhi	r2,0
    2510:	10958304 	addi	r2,r2,22028
    2514:	e0bff615 	stw	r2,-40(fp)
    2518:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    251c:	e0fff717 	ldw	r3,-36(fp)
    2520:	e0bff617 	ldw	r2,-40(fp)
    2524:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2528:	e0bff617 	ldw	r2,-40(fp)
    252c:	10c00017 	ldw	r3,0(r2)
    2530:	e0bff717 	ldw	r2,-36(fp)
    2534:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2538:	e0bff617 	ldw	r2,-40(fp)
    253c:	10c00017 	ldw	r3,0(r2)
    2540:	e0bff717 	ldw	r2,-36(fp)
    2544:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2548:	e0fff617 	ldw	r3,-40(fp)
    254c:	e0bff717 	ldw	r2,-36(fp)
    2550:	18800015 	stw	r2,0(r3)
    2554:	e0bffa17 	ldw	r2,-24(fp)
    2558:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    255c:	e0bff517 	ldw	r2,-44(fp)
    2560:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    2564:	e03fff15 	stw	zero,-4(fp)
    2568:	00000506 	br	2580 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    256c:	00bffa84 	movi	r2,-22
    2570:	e0bfff15 	stw	r2,-4(fp)
    2574:	00000206 	br	2580 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    2578:	00bfde84 	movi	r2,-134
    257c:	e0bfff15 	stw	r2,-4(fp)
    2580:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    2584:	e037883a 	mov	sp,fp
    2588:	df000017 	ldw	fp,0(sp)
    258c:	dec00104 	addi	sp,sp,4
    2590:	f800283a 	ret

00002594 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2594:	defffa04 	addi	sp,sp,-24
    2598:	dfc00515 	stw	ra,20(sp)
    259c:	df000415 	stw	fp,16(sp)
    25a0:	df000404 	addi	fp,sp,16
    25a4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    25a8:	008000c4 	movi	r2,3
    25ac:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    25b0:	e0fffc17 	ldw	r3,-16(fp)
    25b4:	008003f4 	movhi	r2,15
    25b8:	10909004 	addi	r2,r2,16960
    25bc:	188b383a 	mul	r5,r3,r2
    25c0:	0100bef4 	movhi	r4,763
    25c4:	213c2004 	addi	r4,r4,-3968
    25c8:	00007e00 	call	7e0 <__udivsi3>
    25cc:	100b883a 	mov	r5,r2
    25d0:	01200034 	movhi	r4,32768
    25d4:	213fffc4 	addi	r4,r4,-1
    25d8:	00007e00 	call	7e0 <__udivsi3>
    25dc:	100b883a 	mov	r5,r2
    25e0:	e13fff17 	ldw	r4,-4(fp)
    25e4:	00007e00 	call	7e0 <__udivsi3>
    25e8:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    25ec:	e0bffd17 	ldw	r2,-12(fp)
    25f0:	1005003a 	cmpeq	r2,r2,zero
    25f4:	1000281e 	bne	r2,zero,2698 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
    25f8:	e03ffe15 	stw	zero,-8(fp)
    25fc:	00001606 	br	2658 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2600:	00a00034 	movhi	r2,32768
    2604:	10bfffc4 	addi	r2,r2,-1
    2608:	10bfffc4 	addi	r2,r2,-1
    260c:	103ffe1e 	bne	r2,zero,2608 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2610:	e0fffc17 	ldw	r3,-16(fp)
    2614:	008003f4 	movhi	r2,15
    2618:	10909004 	addi	r2,r2,16960
    261c:	188b383a 	mul	r5,r3,r2
    2620:	0100bef4 	movhi	r4,763
    2624:	213c2004 	addi	r4,r4,-3968
    2628:	00007e00 	call	7e0 <__udivsi3>
    262c:	100b883a 	mov	r5,r2
    2630:	01200034 	movhi	r4,32768
    2634:	213fffc4 	addi	r4,r4,-1
    2638:	00007e00 	call	7e0 <__udivsi3>
    263c:	1007883a 	mov	r3,r2
    2640:	e0bfff17 	ldw	r2,-4(fp)
    2644:	10c5c83a 	sub	r2,r2,r3
    2648:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    264c:	e0bffe17 	ldw	r2,-8(fp)
    2650:	10800044 	addi	r2,r2,1
    2654:	e0bffe15 	stw	r2,-8(fp)
    2658:	e0fffe17 	ldw	r3,-8(fp)
    265c:	e0bffd17 	ldw	r2,-12(fp)
    2660:	18bfe716 	blt	r3,r2,2600 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2664:	e0fffc17 	ldw	r3,-16(fp)
    2668:	008003f4 	movhi	r2,15
    266c:	10909004 	addi	r2,r2,16960
    2670:	188b383a 	mul	r5,r3,r2
    2674:	0100bef4 	movhi	r4,763
    2678:	213c2004 	addi	r4,r4,-3968
    267c:	00007e00 	call	7e0 <__udivsi3>
    2680:	1007883a 	mov	r3,r2
    2684:	e0bfff17 	ldw	r2,-4(fp)
    2688:	1885383a 	mul	r2,r3,r2
    268c:	10bfffc4 	addi	r2,r2,-1
    2690:	103ffe1e 	bne	r2,zero,268c <alt_busy_sleep+0xf8>
    2694:	00000c06 	br	26c8 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2698:	e0fffc17 	ldw	r3,-16(fp)
    269c:	008003f4 	movhi	r2,15
    26a0:	10909004 	addi	r2,r2,16960
    26a4:	188b383a 	mul	r5,r3,r2
    26a8:	0100bef4 	movhi	r4,763
    26ac:	213c2004 	addi	r4,r4,-3968
    26b0:	00007e00 	call	7e0 <__udivsi3>
    26b4:	1007883a 	mov	r3,r2
    26b8:	e0bfff17 	ldw	r2,-4(fp)
    26bc:	1885383a 	mul	r2,r3,r2
    26c0:	10bfffc4 	addi	r2,r2,-1
    26c4:	00bffe16 	blt	zero,r2,26c0 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    26c8:	0005883a 	mov	r2,zero
}
    26cc:	e037883a 	mov	sp,fp
    26d0:	dfc00117 	ldw	ra,4(sp)
    26d4:	df000017 	ldw	fp,0(sp)
    26d8:	dec00204 	addi	sp,sp,8
    26dc:	f800283a 	ret

000026e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    26e0:	defff804 	addi	sp,sp,-32
    26e4:	dfc00715 	stw	ra,28(sp)
    26e8:	df000615 	stw	fp,24(sp)
    26ec:	df000604 	addi	fp,sp,24
    26f0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    26f4:	e0bffc17 	ldw	r2,-16(fp)
    26f8:	1004803a 	cmplt	r2,r2,zero
    26fc:	1000081e 	bne	r2,zero,2720 <close+0x40>
    2700:	e0bffc17 	ldw	r2,-16(fp)
    2704:	10800324 	muli	r2,r2,12
    2708:	1007883a 	mov	r3,r2
    270c:	00800034 	movhi	r2,0
    2710:	10951704 	addi	r2,r2,21596
    2714:	1887883a 	add	r3,r3,r2
    2718:	e0ffff15 	stw	r3,-4(fp)
    271c:	00000106 	br	2724 <close+0x44>
    2720:	e03fff15 	stw	zero,-4(fp)
    2724:	e0bfff17 	ldw	r2,-4(fp)
    2728:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    272c:	e0bffb17 	ldw	r2,-20(fp)
    2730:	1005003a 	cmpeq	r2,r2,zero
    2734:	10001d1e 	bne	r2,zero,27ac <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2738:	e0bffb17 	ldw	r2,-20(fp)
    273c:	10800017 	ldw	r2,0(r2)
    2740:	10800417 	ldw	r2,16(r2)
    2744:	1005003a 	cmpeq	r2,r2,zero
    2748:	1000071e 	bne	r2,zero,2768 <close+0x88>
    274c:	e0bffb17 	ldw	r2,-20(fp)
    2750:	10800017 	ldw	r2,0(r2)
    2754:	10800417 	ldw	r2,16(r2)
    2758:	e13ffb17 	ldw	r4,-20(fp)
    275c:	103ee83a 	callr	r2
    2760:	e0bffe15 	stw	r2,-8(fp)
    2764:	00000106 	br	276c <close+0x8c>
    2768:	e03ffe15 	stw	zero,-8(fp)
    276c:	e0bffe17 	ldw	r2,-8(fp)
    2770:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2774:	e13ffc17 	ldw	r4,-16(fp)
    2778:	000315c0 	call	315c <alt_release_fd>
    if (rval < 0)
    277c:	e0bffa17 	ldw	r2,-24(fp)
    2780:	1004403a 	cmpge	r2,r2,zero
    2784:	1000071e 	bne	r2,zero,27a4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    2788:	00027dc0 	call	27dc <alt_get_errno>
    278c:	e0fffa17 	ldw	r3,-24(fp)
    2790:	00c7c83a 	sub	r3,zero,r3
    2794:	10c00015 	stw	r3,0(r2)
      return -1;
    2798:	00bfffc4 	movi	r2,-1
    279c:	e0bffd15 	stw	r2,-12(fp)
    27a0:	00000806 	br	27c4 <close+0xe4>
    }
    return 0;
    27a4:	e03ffd15 	stw	zero,-12(fp)
    27a8:	00000606 	br	27c4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    27ac:	00027dc0 	call	27dc <alt_get_errno>
    27b0:	1007883a 	mov	r3,r2
    27b4:	00801444 	movi	r2,81
    27b8:	18800015 	stw	r2,0(r3)
    return -1;
    27bc:	00bfffc4 	movi	r2,-1
    27c0:	e0bffd15 	stw	r2,-12(fp)
    27c4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    27c8:	e037883a 	mov	sp,fp
    27cc:	dfc00117 	ldw	ra,4(sp)
    27d0:	df000017 	ldw	fp,0(sp)
    27d4:	dec00204 	addi	sp,sp,8
    27d8:	f800283a 	ret

000027dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    27dc:	defffd04 	addi	sp,sp,-12
    27e0:	dfc00215 	stw	ra,8(sp)
    27e4:	df000115 	stw	fp,4(sp)
    27e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    27ec:	00800034 	movhi	r2,0
    27f0:	10958104 	addi	r2,r2,22020
    27f4:	10800017 	ldw	r2,0(r2)
    27f8:	1005003a 	cmpeq	r2,r2,zero
    27fc:	1000061e 	bne	r2,zero,2818 <alt_get_errno+0x3c>
    2800:	00800034 	movhi	r2,0
    2804:	10958104 	addi	r2,r2,22020
    2808:	10800017 	ldw	r2,0(r2)
    280c:	103ee83a 	callr	r2
    2810:	e0bfff15 	stw	r2,-4(fp)
    2814:	00000306 	br	2824 <alt_get_errno+0x48>
    2818:	00800034 	movhi	r2,0
    281c:	109c1a04 	addi	r2,r2,28776
    2820:	e0bfff15 	stw	r2,-4(fp)
    2824:	e0bfff17 	ldw	r2,-4(fp)
}
    2828:	e037883a 	mov	sp,fp
    282c:	dfc00117 	ldw	ra,4(sp)
    2830:	df000017 	ldw	fp,0(sp)
    2834:	dec00204 	addi	sp,sp,8
    2838:	f800283a 	ret

0000283c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    283c:	deffff04 	addi	sp,sp,-4
    2840:	df000015 	stw	fp,0(sp)
    2844:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2848:	e037883a 	mov	sp,fp
    284c:	df000017 	ldw	fp,0(sp)
    2850:	dec00104 	addi	sp,sp,4
    2854:	f800283a 	ret

00002858 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2858:	defffc04 	addi	sp,sp,-16
    285c:	df000315 	stw	fp,12(sp)
    2860:	df000304 	addi	fp,sp,12
    2864:	e13ffd15 	stw	r4,-12(fp)
    2868:	e17ffe15 	stw	r5,-8(fp)
    286c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2870:	e0bfff17 	ldw	r2,-4(fp)
}
    2874:	e037883a 	mov	sp,fp
    2878:	df000017 	ldw	fp,0(sp)
    287c:	dec00104 	addi	sp,sp,4
    2880:	f800283a 	ret

00002884 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2884:	defff904 	addi	sp,sp,-28
    2888:	dfc00615 	stw	ra,24(sp)
    288c:	df000515 	stw	fp,20(sp)
    2890:	df000504 	addi	fp,sp,20
    2894:	e13ffd15 	stw	r4,-12(fp)
    2898:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    289c:	e0bffd17 	ldw	r2,-12(fp)
    28a0:	1005003a 	cmpeq	r2,r2,zero
    28a4:	1000041e 	bne	r2,zero,28b8 <alt_dev_llist_insert+0x34>
    28a8:	e0bffd17 	ldw	r2,-12(fp)
    28ac:	10800217 	ldw	r2,8(r2)
    28b0:	1004c03a 	cmpne	r2,r2,zero
    28b4:	1000071e 	bne	r2,zero,28d4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    28b8:	00029380 	call	2938 <alt_get_errno>
    28bc:	1007883a 	mov	r3,r2
    28c0:	00800584 	movi	r2,22
    28c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    28c8:	00bffa84 	movi	r2,-22
    28cc:	e0bfff15 	stw	r2,-4(fp)
    28d0:	00001306 	br	2920 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    28d4:	e0fffd17 	ldw	r3,-12(fp)
    28d8:	e0bffe17 	ldw	r2,-8(fp)
    28dc:	e0bffb15 	stw	r2,-20(fp)
    28e0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    28e4:	e0fffc17 	ldw	r3,-16(fp)
    28e8:	e0bffb17 	ldw	r2,-20(fp)
    28ec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    28f0:	e0bffb17 	ldw	r2,-20(fp)
    28f4:	10c00017 	ldw	r3,0(r2)
    28f8:	e0bffc17 	ldw	r2,-16(fp)
    28fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2900:	e0bffb17 	ldw	r2,-20(fp)
    2904:	10c00017 	ldw	r3,0(r2)
    2908:	e0bffc17 	ldw	r2,-16(fp)
    290c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2910:	e0fffb17 	ldw	r3,-20(fp)
    2914:	e0bffc17 	ldw	r2,-16(fp)
    2918:	18800015 	stw	r2,0(r3)

  return 0;  
    291c:	e03fff15 	stw	zero,-4(fp)
    2920:	e0bfff17 	ldw	r2,-4(fp)
}
    2924:	e037883a 	mov	sp,fp
    2928:	dfc00117 	ldw	ra,4(sp)
    292c:	df000017 	ldw	fp,0(sp)
    2930:	dec00204 	addi	sp,sp,8
    2934:	f800283a 	ret

00002938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2938:	defffd04 	addi	sp,sp,-12
    293c:	dfc00215 	stw	ra,8(sp)
    2940:	df000115 	stw	fp,4(sp)
    2944:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2948:	00800034 	movhi	r2,0
    294c:	10958104 	addi	r2,r2,22020
    2950:	10800017 	ldw	r2,0(r2)
    2954:	1005003a 	cmpeq	r2,r2,zero
    2958:	1000061e 	bne	r2,zero,2974 <alt_get_errno+0x3c>
    295c:	00800034 	movhi	r2,0
    2960:	10958104 	addi	r2,r2,22020
    2964:	10800017 	ldw	r2,0(r2)
    2968:	103ee83a 	callr	r2
    296c:	e0bfff15 	stw	r2,-4(fp)
    2970:	00000306 	br	2980 <alt_get_errno+0x48>
    2974:	00800034 	movhi	r2,0
    2978:	109c1a04 	addi	r2,r2,28776
    297c:	e0bfff15 	stw	r2,-4(fp)
    2980:	e0bfff17 	ldw	r2,-4(fp)
}
    2984:	e037883a 	mov	sp,fp
    2988:	dfc00117 	ldw	ra,4(sp)
    298c:	df000017 	ldw	fp,0(sp)
    2990:	dec00204 	addi	sp,sp,8
    2994:	f800283a 	ret

00002998 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2998:	defffd04 	addi	sp,sp,-12
    299c:	dfc00215 	stw	ra,8(sp)
    29a0:	df000115 	stw	fp,4(sp)
    29a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    29a8:	00bfff04 	movi	r2,-4
    29ac:	00c00034 	movhi	r3,0
    29b0:	18cee704 	addi	r3,r3,15260
    29b4:	1885883a 	add	r2,r3,r2
    29b8:	e0bfff15 	stw	r2,-4(fp)
    29bc:	00000606 	br	29d8 <_do_ctors+0x40>
        (*ctor) (); 
    29c0:	e0bfff17 	ldw	r2,-4(fp)
    29c4:	10800017 	ldw	r2,0(r2)
    29c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    29cc:	e0bfff17 	ldw	r2,-4(fp)
    29d0:	10bfff04 	addi	r2,r2,-4
    29d4:	e0bfff15 	stw	r2,-4(fp)
    29d8:	e0ffff17 	ldw	r3,-4(fp)
    29dc:	00800034 	movhi	r2,0
    29e0:	108ee604 	addi	r2,r2,15256
    29e4:	18bff62e 	bgeu	r3,r2,29c0 <_do_ctors+0x28>
        (*ctor) (); 
}
    29e8:	e037883a 	mov	sp,fp
    29ec:	dfc00117 	ldw	ra,4(sp)
    29f0:	df000017 	ldw	fp,0(sp)
    29f4:	dec00204 	addi	sp,sp,8
    29f8:	f800283a 	ret

000029fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    29fc:	defffd04 	addi	sp,sp,-12
    2a00:	dfc00215 	stw	ra,8(sp)
    2a04:	df000115 	stw	fp,4(sp)
    2a08:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2a0c:	00bfff04 	movi	r2,-4
    2a10:	00c00034 	movhi	r3,0
    2a14:	18cee704 	addi	r3,r3,15260
    2a18:	1885883a 	add	r2,r3,r2
    2a1c:	e0bfff15 	stw	r2,-4(fp)
    2a20:	00000606 	br	2a3c <_do_dtors+0x40>
        (*dtor) (); 
    2a24:	e0bfff17 	ldw	r2,-4(fp)
    2a28:	10800017 	ldw	r2,0(r2)
    2a2c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2a30:	e0bfff17 	ldw	r2,-4(fp)
    2a34:	10bfff04 	addi	r2,r2,-4
    2a38:	e0bfff15 	stw	r2,-4(fp)
    2a3c:	e0ffff17 	ldw	r3,-4(fp)
    2a40:	00800034 	movhi	r2,0
    2a44:	108ee704 	addi	r2,r2,15260
    2a48:	18bff62e 	bgeu	r3,r2,2a24 <_do_dtors+0x28>
        (*dtor) (); 
}
    2a4c:	e037883a 	mov	sp,fp
    2a50:	dfc00117 	ldw	ra,4(sp)
    2a54:	df000017 	ldw	fp,0(sp)
    2a58:	dec00204 	addi	sp,sp,8
    2a5c:	f800283a 	ret

00002a60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2a60:	defffe04 	addi	sp,sp,-8
    2a64:	dfc00115 	stw	ra,4(sp)
    2a68:	df000015 	stw	fp,0(sp)
    2a6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2a70:	0009883a 	mov	r4,zero
    2a74:	01440004 	movi	r5,4096
    2a78:	00035ec0 	call	35ec <alt_icache_flush>
#endif
}
    2a7c:	e037883a 	mov	sp,fp
    2a80:	dfc00117 	ldw	ra,4(sp)
    2a84:	df000017 	ldw	fp,0(sp)
    2a88:	dec00204 	addi	sp,sp,8
    2a8c:	f800283a 	ret

00002a90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2a90:	defff904 	addi	sp,sp,-28
    2a94:	dfc00615 	stw	ra,24(sp)
    2a98:	df000515 	stw	fp,20(sp)
    2a9c:	df000504 	addi	fp,sp,20
    2aa0:	e13ffc15 	stw	r4,-16(fp)
    2aa4:	e17ffd15 	stw	r5,-12(fp)
    2aa8:	e1bffe15 	stw	r6,-8(fp)
    2aac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2ab0:	e0800217 	ldw	r2,8(fp)
    2ab4:	d8800015 	stw	r2,0(sp)
    2ab8:	e13ffc17 	ldw	r4,-16(fp)
    2abc:	e17ffd17 	ldw	r5,-12(fp)
    2ac0:	e1bffe17 	ldw	r6,-8(fp)
    2ac4:	e1ffff17 	ldw	r7,-4(fp)
    2ac8:	0002c640 	call	2c64 <alt_iic_isr_register>
}  
    2acc:	e037883a 	mov	sp,fp
    2ad0:	dfc00117 	ldw	ra,4(sp)
    2ad4:	df000017 	ldw	fp,0(sp)
    2ad8:	dec00204 	addi	sp,sp,8
    2adc:	f800283a 	ret

00002ae0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    2ae0:	defff904 	addi	sp,sp,-28
    2ae4:	df000615 	stw	fp,24(sp)
    2ae8:	df000604 	addi	fp,sp,24
    2aec:	e13ffe15 	stw	r4,-8(fp)
    2af0:	e17fff15 	stw	r5,-4(fp)
    2af4:	e0bfff17 	ldw	r2,-4(fp)
    2af8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2afc:	0005303a 	rdctl	r2,status
    2b00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2b04:	e0fffb17 	ldw	r3,-20(fp)
    2b08:	00bfff84 	movi	r2,-2
    2b0c:	1884703a 	and	r2,r3,r2
    2b10:	1001703a 	wrctl	status,r2
  
  return context;
    2b14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2b18:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    2b1c:	e0fffc17 	ldw	r3,-16(fp)
    2b20:	00800044 	movi	r2,1
    2b24:	10c4983a 	sll	r2,r2,r3
    2b28:	1007883a 	mov	r3,r2
    2b2c:	00800034 	movhi	r2,0
    2b30:	109c1e04 	addi	r2,r2,28792
    2b34:	10800017 	ldw	r2,0(r2)
    2b38:	1886b03a 	or	r3,r3,r2
    2b3c:	00800034 	movhi	r2,0
    2b40:	109c1e04 	addi	r2,r2,28792
    2b44:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2b48:	00800034 	movhi	r2,0
    2b4c:	109c1e04 	addi	r2,r2,28792
    2b50:	10800017 	ldw	r2,0(r2)
    2b54:	100170fa 	wrctl	ienable,r2
    2b58:	e0bffd17 	ldw	r2,-12(fp)
    2b5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2b60:	e0bffa17 	ldw	r2,-24(fp)
    2b64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2b68:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    2b6c:	e037883a 	mov	sp,fp
    2b70:	df000017 	ldw	fp,0(sp)
    2b74:	dec00104 	addi	sp,sp,4
    2b78:	f800283a 	ret

00002b7c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    2b7c:	defff904 	addi	sp,sp,-28
    2b80:	df000615 	stw	fp,24(sp)
    2b84:	df000604 	addi	fp,sp,24
    2b88:	e13ffe15 	stw	r4,-8(fp)
    2b8c:	e17fff15 	stw	r5,-4(fp)
    2b90:	e0bfff17 	ldw	r2,-4(fp)
    2b94:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2b98:	0005303a 	rdctl	r2,status
    2b9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ba0:	e0fffb17 	ldw	r3,-20(fp)
    2ba4:	00bfff84 	movi	r2,-2
    2ba8:	1884703a 	and	r2,r3,r2
    2bac:	1001703a 	wrctl	status,r2
  
  return context;
    2bb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2bb4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    2bb8:	e0fffc17 	ldw	r3,-16(fp)
    2bbc:	00800044 	movi	r2,1
    2bc0:	10c4983a 	sll	r2,r2,r3
    2bc4:	0084303a 	nor	r2,zero,r2
    2bc8:	1007883a 	mov	r3,r2
    2bcc:	00800034 	movhi	r2,0
    2bd0:	109c1e04 	addi	r2,r2,28792
    2bd4:	10800017 	ldw	r2,0(r2)
    2bd8:	1886703a 	and	r3,r3,r2
    2bdc:	00800034 	movhi	r2,0
    2be0:	109c1e04 	addi	r2,r2,28792
    2be4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2be8:	00800034 	movhi	r2,0
    2bec:	109c1e04 	addi	r2,r2,28792
    2bf0:	10800017 	ldw	r2,0(r2)
    2bf4:	100170fa 	wrctl	ienable,r2
    2bf8:	e0bffd17 	ldw	r2,-12(fp)
    2bfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2c00:	e0bffa17 	ldw	r2,-24(fp)
    2c04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2c08:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    2c0c:	e037883a 	mov	sp,fp
    2c10:	df000017 	ldw	fp,0(sp)
    2c14:	dec00104 	addi	sp,sp,4
    2c18:	f800283a 	ret

00002c1c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    2c1c:	defffc04 	addi	sp,sp,-16
    2c20:	df000315 	stw	fp,12(sp)
    2c24:	df000304 	addi	fp,sp,12
    2c28:	e13ffe15 	stw	r4,-8(fp)
    2c2c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    2c30:	000530fa 	rdctl	r2,ienable
    2c34:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    2c38:	e0ffff17 	ldw	r3,-4(fp)
    2c3c:	00800044 	movi	r2,1
    2c40:	10c4983a 	sll	r2,r2,r3
    2c44:	1007883a 	mov	r3,r2
    2c48:	e0bffd17 	ldw	r2,-12(fp)
    2c4c:	1884703a 	and	r2,r3,r2
    2c50:	1004c03a 	cmpne	r2,r2,zero
}
    2c54:	e037883a 	mov	sp,fp
    2c58:	df000017 	ldw	fp,0(sp)
    2c5c:	dec00104 	addi	sp,sp,4
    2c60:	f800283a 	ret

00002c64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2c64:	defff404 	addi	sp,sp,-48
    2c68:	dfc00b15 	stw	ra,44(sp)
    2c6c:	df000a15 	stw	fp,40(sp)
    2c70:	df000a04 	addi	fp,sp,40
    2c74:	e13ffb15 	stw	r4,-20(fp)
    2c78:	e17ffc15 	stw	r5,-16(fp)
    2c7c:	e1bffd15 	stw	r6,-12(fp)
    2c80:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    2c84:	00bffa84 	movi	r2,-22
    2c88:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    2c8c:	e0bffc17 	ldw	r2,-16(fp)
    2c90:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2c94:	e0bff917 	ldw	r2,-28(fp)
    2c98:	10800808 	cmpgei	r2,r2,32
    2c9c:	1000291e 	bne	r2,zero,2d44 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ca0:	0005303a 	rdctl	r2,status
    2ca4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ca8:	e0fff717 	ldw	r3,-36(fp)
    2cac:	00bfff84 	movi	r2,-2
    2cb0:	1884703a 	and	r2,r3,r2
    2cb4:	1001703a 	wrctl	status,r2
  
  return context;
    2cb8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    2cbc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    2cc0:	e0bff917 	ldw	r2,-28(fp)
    2cc4:	00c00034 	movhi	r3,0
    2cc8:	18dc2b04 	addi	r3,r3,28844
    2ccc:	100490fa 	slli	r2,r2,3
    2cd0:	10c7883a 	add	r3,r2,r3
    2cd4:	e0bffd17 	ldw	r2,-12(fp)
    2cd8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    2cdc:	e0bff917 	ldw	r2,-28(fp)
    2ce0:	00c00034 	movhi	r3,0
    2ce4:	18dc2b04 	addi	r3,r3,28844
    2ce8:	100490fa 	slli	r2,r2,3
    2cec:	10c5883a 	add	r2,r2,r3
    2cf0:	10c00104 	addi	r3,r2,4
    2cf4:	e0bffe17 	ldw	r2,-8(fp)
    2cf8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2cfc:	e0bffd17 	ldw	r2,-12(fp)
    2d00:	1005003a 	cmpeq	r2,r2,zero
    2d04:	1000051e 	bne	r2,zero,2d1c <alt_iic_isr_register+0xb8>
    2d08:	e17ff917 	ldw	r5,-28(fp)
    2d0c:	e13ffb17 	ldw	r4,-20(fp)
    2d10:	0002ae00 	call	2ae0 <alt_ic_irq_enable>
    2d14:	e0bfff15 	stw	r2,-4(fp)
    2d18:	00000406 	br	2d2c <alt_iic_isr_register+0xc8>
    2d1c:	e17ff917 	ldw	r5,-28(fp)
    2d20:	e13ffb17 	ldw	r4,-20(fp)
    2d24:	0002b7c0 	call	2b7c <alt_ic_irq_disable>
    2d28:	e0bfff15 	stw	r2,-4(fp)
    2d2c:	e0bfff17 	ldw	r2,-4(fp)
    2d30:	e0bffa15 	stw	r2,-24(fp)
    2d34:	e0bff817 	ldw	r2,-32(fp)
    2d38:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2d3c:	e0bff617 	ldw	r2,-40(fp)
    2d40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    2d44:	e0bffa17 	ldw	r2,-24(fp)
}
    2d48:	e037883a 	mov	sp,fp
    2d4c:	dfc00117 	ldw	ra,4(sp)
    2d50:	df000017 	ldw	fp,0(sp)
    2d54:	dec00204 	addi	sp,sp,8
    2d58:	f800283a 	ret

00002d5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2d5c:	defff904 	addi	sp,sp,-28
    2d60:	dfc00615 	stw	ra,24(sp)
    2d64:	df000515 	stw	fp,20(sp)
    2d68:	df000504 	addi	fp,sp,20
    2d6c:	e13ffc15 	stw	r4,-16(fp)
    2d70:	e17ffd15 	stw	r5,-12(fp)
    2d74:	e1bffe15 	stw	r6,-8(fp)
    2d78:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    2d7c:	e13ffd17 	ldw	r4,-12(fp)
    2d80:	e17ffe17 	ldw	r5,-8(fp)
    2d84:	e1bfff17 	ldw	r6,-4(fp)
    2d88:	0002f740 	call	2f74 <open>
    2d8c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    2d90:	e0bffb17 	ldw	r2,-20(fp)
    2d94:	1004803a 	cmplt	r2,r2,zero
    2d98:	10001c1e 	bne	r2,zero,2e0c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    2d9c:	e0bffb17 	ldw	r2,-20(fp)
    2da0:	00c00034 	movhi	r3,0
    2da4:	18d51704 	addi	r3,r3,21596
    2da8:	10800324 	muli	r2,r2,12
    2dac:	10c5883a 	add	r2,r2,r3
    2db0:	10c00017 	ldw	r3,0(r2)
    2db4:	e0bffc17 	ldw	r2,-16(fp)
    2db8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    2dbc:	e0bffb17 	ldw	r2,-20(fp)
    2dc0:	00c00034 	movhi	r3,0
    2dc4:	18d51704 	addi	r3,r3,21596
    2dc8:	10800324 	muli	r2,r2,12
    2dcc:	10c5883a 	add	r2,r2,r3
    2dd0:	10800104 	addi	r2,r2,4
    2dd4:	10c00017 	ldw	r3,0(r2)
    2dd8:	e0bffc17 	ldw	r2,-16(fp)
    2ddc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2de0:	e0bffb17 	ldw	r2,-20(fp)
    2de4:	00c00034 	movhi	r3,0
    2de8:	18d51704 	addi	r3,r3,21596
    2dec:	10800324 	muli	r2,r2,12
    2df0:	10c5883a 	add	r2,r2,r3
    2df4:	10800204 	addi	r2,r2,8
    2df8:	10c00017 	ldw	r3,0(r2)
    2dfc:	e0bffc17 	ldw	r2,-16(fp)
    2e00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2e04:	e13ffb17 	ldw	r4,-20(fp)
    2e08:	000315c0 	call	315c <alt_release_fd>
  }
} 
    2e0c:	e037883a 	mov	sp,fp
    2e10:	dfc00117 	ldw	ra,4(sp)
    2e14:	df000017 	ldw	fp,0(sp)
    2e18:	dec00204 	addi	sp,sp,8
    2e1c:	f800283a 	ret

00002e20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2e20:	defffb04 	addi	sp,sp,-20
    2e24:	dfc00415 	stw	ra,16(sp)
    2e28:	df000315 	stw	fp,12(sp)
    2e2c:	df000304 	addi	fp,sp,12
    2e30:	e13ffd15 	stw	r4,-12(fp)
    2e34:	e17ffe15 	stw	r5,-8(fp)
    2e38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2e3c:	01000034 	movhi	r4,0
    2e40:	21151a04 	addi	r4,r4,21608
    2e44:	e17ffd17 	ldw	r5,-12(fp)
    2e48:	01800044 	movi	r6,1
    2e4c:	01c07fc4 	movi	r7,511
    2e50:	0002d5c0 	call	2d5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2e54:	01000034 	movhi	r4,0
    2e58:	21151704 	addi	r4,r4,21596
    2e5c:	e17ffe17 	ldw	r5,-8(fp)
    2e60:	000d883a 	mov	r6,zero
    2e64:	01c07fc4 	movi	r7,511
    2e68:	0002d5c0 	call	2d5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2e6c:	01000034 	movhi	r4,0
    2e70:	21151d04 	addi	r4,r4,21620
    2e74:	e17fff17 	ldw	r5,-4(fp)
    2e78:	01800044 	movi	r6,1
    2e7c:	01c07fc4 	movi	r7,511
    2e80:	0002d5c0 	call	2d5c <alt_open_fd>
}  
    2e84:	e037883a 	mov	sp,fp
    2e88:	dfc00117 	ldw	ra,4(sp)
    2e8c:	df000017 	ldw	fp,0(sp)
    2e90:	dec00204 	addi	sp,sp,8
    2e94:	f800283a 	ret

00002e98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2e98:	defffc04 	addi	sp,sp,-16
    2e9c:	df000315 	stw	fp,12(sp)
    2ea0:	df000304 	addi	fp,sp,12
    2ea4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2ea8:	e0bffe17 	ldw	r2,-8(fp)
    2eac:	10800217 	ldw	r2,8(r2)
    2eb0:	10d00034 	orhi	r3,r2,16384
    2eb4:	e0bffe17 	ldw	r2,-8(fp)
    2eb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2ebc:	e03ffd15 	stw	zero,-12(fp)
    2ec0:	00002006 	br	2f44 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2ec4:	e0bffd17 	ldw	r2,-12(fp)
    2ec8:	00c00034 	movhi	r3,0
    2ecc:	18d51704 	addi	r3,r3,21596
    2ed0:	10800324 	muli	r2,r2,12
    2ed4:	10c5883a 	add	r2,r2,r3
    2ed8:	10c00017 	ldw	r3,0(r2)
    2edc:	e0bffe17 	ldw	r2,-8(fp)
    2ee0:	10800017 	ldw	r2,0(r2)
    2ee4:	1880141e 	bne	r3,r2,2f38 <alt_file_locked+0xa0>
    2ee8:	e0bffd17 	ldw	r2,-12(fp)
    2eec:	00c00034 	movhi	r3,0
    2ef0:	18d51704 	addi	r3,r3,21596
    2ef4:	10800324 	muli	r2,r2,12
    2ef8:	10c5883a 	add	r2,r2,r3
    2efc:	10800204 	addi	r2,r2,8
    2f00:	10800017 	ldw	r2,0(r2)
    2f04:	1004403a 	cmpge	r2,r2,zero
    2f08:	10000b1e 	bne	r2,zero,2f38 <alt_file_locked+0xa0>
    2f0c:	e0bffd17 	ldw	r2,-12(fp)
    2f10:	10800324 	muli	r2,r2,12
    2f14:	1007883a 	mov	r3,r2
    2f18:	00800034 	movhi	r2,0
    2f1c:	10951704 	addi	r2,r2,21596
    2f20:	1887883a 	add	r3,r3,r2
    2f24:	e0bffe17 	ldw	r2,-8(fp)
    2f28:	18800326 	beq	r3,r2,2f38 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2f2c:	00bffcc4 	movi	r2,-13
    2f30:	e0bfff15 	stw	r2,-4(fp)
    2f34:	00000a06 	br	2f60 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2f38:	e0bffd17 	ldw	r2,-12(fp)
    2f3c:	10800044 	addi	r2,r2,1
    2f40:	e0bffd15 	stw	r2,-12(fp)
    2f44:	00800034 	movhi	r2,0
    2f48:	10958004 	addi	r2,r2,22016
    2f4c:	10800017 	ldw	r2,0(r2)
    2f50:	1007883a 	mov	r3,r2
    2f54:	e0bffd17 	ldw	r2,-12(fp)
    2f58:	18bfda2e 	bgeu	r3,r2,2ec4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2f5c:	e03fff15 	stw	zero,-4(fp)
    2f60:	e0bfff17 	ldw	r2,-4(fp)
}
    2f64:	e037883a 	mov	sp,fp
    2f68:	df000017 	ldw	fp,0(sp)
    2f6c:	dec00104 	addi	sp,sp,4
    2f70:	f800283a 	ret

00002f74 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2f74:	defff404 	addi	sp,sp,-48
    2f78:	dfc00b15 	stw	ra,44(sp)
    2f7c:	df000a15 	stw	fp,40(sp)
    2f80:	df000a04 	addi	fp,sp,40
    2f84:	e13ffb15 	stw	r4,-20(fp)
    2f88:	e17ffc15 	stw	r5,-16(fp)
    2f8c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2f90:	00bfffc4 	movi	r2,-1
    2f94:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    2f98:	00bffb44 	movi	r2,-19
    2f9c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    2fa0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2fa4:	e13ffb17 	ldw	r4,-20(fp)
    2fa8:	01400034 	movhi	r5,0
    2fac:	29557e04 	addi	r5,r5,22008
    2fb0:	00033800 	call	3380 <alt_find_dev>
    2fb4:	e0bffa15 	stw	r2,-24(fp)
    2fb8:	e0bffa17 	ldw	r2,-24(fp)
    2fbc:	1004c03a 	cmpne	r2,r2,zero
    2fc0:	1000051e 	bne	r2,zero,2fd8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2fc4:	e13ffb17 	ldw	r4,-20(fp)
    2fc8:	00034140 	call	3414 <alt_find_file>
    2fcc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    2fd0:	00800044 	movi	r2,1
    2fd4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2fd8:	e0bffa17 	ldw	r2,-24(fp)
    2fdc:	1005003a 	cmpeq	r2,r2,zero
    2fe0:	1000301e 	bne	r2,zero,30a4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2fe4:	e13ffa17 	ldw	r4,-24(fp)
    2fe8:	00035340 	call	3534 <alt_get_fd>
    2fec:	e0bff815 	stw	r2,-32(fp)
    2ff0:	e0bff817 	ldw	r2,-32(fp)
    2ff4:	1004403a 	cmpge	r2,r2,zero
    2ff8:	1000031e 	bne	r2,zero,3008 <open+0x94>
    {
      status = index;
    2ffc:	e0bff817 	ldw	r2,-32(fp)
    3000:	e0bff715 	stw	r2,-36(fp)
    3004:	00002906 	br	30ac <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    3008:	e0bff817 	ldw	r2,-32(fp)
    300c:	10800324 	muli	r2,r2,12
    3010:	1007883a 	mov	r3,r2
    3014:	00800034 	movhi	r2,0
    3018:	10951704 	addi	r2,r2,21596
    301c:	1885883a 	add	r2,r3,r2
    3020:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    3024:	e0fffc17 	ldw	r3,-16(fp)
    3028:	00900034 	movhi	r2,16384
    302c:	10bfffc4 	addi	r2,r2,-1
    3030:	1886703a 	and	r3,r3,r2
    3034:	e0bff917 	ldw	r2,-28(fp)
    3038:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    303c:	e0bff617 	ldw	r2,-40(fp)
    3040:	1004c03a 	cmpne	r2,r2,zero
    3044:	1000061e 	bne	r2,zero,3060 <open+0xec>
    3048:	e13ff917 	ldw	r4,-28(fp)
    304c:	0002e980 	call	2e98 <alt_file_locked>
    3050:	e0bff715 	stw	r2,-36(fp)
    3054:	e0bff717 	ldw	r2,-36(fp)
    3058:	1004803a 	cmplt	r2,r2,zero
    305c:	1000131e 	bne	r2,zero,30ac <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    3060:	e0bffa17 	ldw	r2,-24(fp)
    3064:	10800317 	ldw	r2,12(r2)
    3068:	1005003a 	cmpeq	r2,r2,zero
    306c:	1000091e 	bne	r2,zero,3094 <open+0x120>
    3070:	e0bffa17 	ldw	r2,-24(fp)
    3074:	10800317 	ldw	r2,12(r2)
    3078:	e13ff917 	ldw	r4,-28(fp)
    307c:	e17ffb17 	ldw	r5,-20(fp)
    3080:	e1bffc17 	ldw	r6,-16(fp)
    3084:	e1fffd17 	ldw	r7,-12(fp)
    3088:	103ee83a 	callr	r2
    308c:	e0bfff15 	stw	r2,-4(fp)
    3090:	00000106 	br	3098 <open+0x124>
    3094:	e03fff15 	stw	zero,-4(fp)
    3098:	e0bfff17 	ldw	r2,-4(fp)
    309c:	e0bff715 	stw	r2,-36(fp)
    30a0:	00000206 	br	30ac <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    30a4:	00bffb44 	movi	r2,-19
    30a8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    30ac:	e0bff717 	ldw	r2,-36(fp)
    30b0:	1004403a 	cmpge	r2,r2,zero
    30b4:	1000091e 	bne	r2,zero,30dc <open+0x168>
  {
    alt_release_fd (index);  
    30b8:	e13ff817 	ldw	r4,-32(fp)
    30bc:	000315c0 	call	315c <alt_release_fd>
    ALT_ERRNO = -status;
    30c0:	00030fc0 	call	30fc <alt_get_errno>
    30c4:	e0fff717 	ldw	r3,-36(fp)
    30c8:	00c7c83a 	sub	r3,zero,r3
    30cc:	10c00015 	stw	r3,0(r2)
    return -1;
    30d0:	00bfffc4 	movi	r2,-1
    30d4:	e0bffe15 	stw	r2,-8(fp)
    30d8:	00000206 	br	30e4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    30dc:	e0bff817 	ldw	r2,-32(fp)
    30e0:	e0bffe15 	stw	r2,-8(fp)
    30e4:	e0bffe17 	ldw	r2,-8(fp)
}
    30e8:	e037883a 	mov	sp,fp
    30ec:	dfc00117 	ldw	ra,4(sp)
    30f0:	df000017 	ldw	fp,0(sp)
    30f4:	dec00204 	addi	sp,sp,8
    30f8:	f800283a 	ret

000030fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    30fc:	defffd04 	addi	sp,sp,-12
    3100:	dfc00215 	stw	ra,8(sp)
    3104:	df000115 	stw	fp,4(sp)
    3108:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    310c:	00800034 	movhi	r2,0
    3110:	10958104 	addi	r2,r2,22020
    3114:	10800017 	ldw	r2,0(r2)
    3118:	1005003a 	cmpeq	r2,r2,zero
    311c:	1000061e 	bne	r2,zero,3138 <alt_get_errno+0x3c>
    3120:	00800034 	movhi	r2,0
    3124:	10958104 	addi	r2,r2,22020
    3128:	10800017 	ldw	r2,0(r2)
    312c:	103ee83a 	callr	r2
    3130:	e0bfff15 	stw	r2,-4(fp)
    3134:	00000306 	br	3144 <alt_get_errno+0x48>
    3138:	00800034 	movhi	r2,0
    313c:	109c1a04 	addi	r2,r2,28776
    3140:	e0bfff15 	stw	r2,-4(fp)
    3144:	e0bfff17 	ldw	r2,-4(fp)
}
    3148:	e037883a 	mov	sp,fp
    314c:	dfc00117 	ldw	ra,4(sp)
    3150:	df000017 	ldw	fp,0(sp)
    3154:	dec00204 	addi	sp,sp,8
    3158:	f800283a 	ret

0000315c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    315c:	defffe04 	addi	sp,sp,-8
    3160:	df000115 	stw	fp,4(sp)
    3164:	df000104 	addi	fp,sp,4
    3168:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    316c:	e0bfff17 	ldw	r2,-4(fp)
    3170:	108000d0 	cmplti	r2,r2,3
    3174:	10000d1e 	bne	r2,zero,31ac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    3178:	e0bfff17 	ldw	r2,-4(fp)
    317c:	00c00034 	movhi	r3,0
    3180:	18d51704 	addi	r3,r3,21596
    3184:	10800324 	muli	r2,r2,12
    3188:	10c5883a 	add	r2,r2,r3
    318c:	10800204 	addi	r2,r2,8
    3190:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3194:	e0bfff17 	ldw	r2,-4(fp)
    3198:	00c00034 	movhi	r3,0
    319c:	18d51704 	addi	r3,r3,21596
    31a0:	10800324 	muli	r2,r2,12
    31a4:	10c5883a 	add	r2,r2,r3
    31a8:	10000015 	stw	zero,0(r2)
  }
}
    31ac:	e037883a 	mov	sp,fp
    31b0:	df000017 	ldw	fp,0(sp)
    31b4:	dec00104 	addi	sp,sp,4
    31b8:	f800283a 	ret

000031bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    31bc:	defffa04 	addi	sp,sp,-24
    31c0:	df000515 	stw	fp,20(sp)
    31c4:	df000504 	addi	fp,sp,20
    31c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    31cc:	0005303a 	rdctl	r2,status
    31d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    31d4:	e0fffd17 	ldw	r3,-12(fp)
    31d8:	00bfff84 	movi	r2,-2
    31dc:	1884703a 	and	r2,r3,r2
    31e0:	1001703a 	wrctl	status,r2
  
  return context;
    31e4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    31e8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    31ec:	e0bfff17 	ldw	r2,-4(fp)
    31f0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    31f4:	e0bffc17 	ldw	r2,-16(fp)
    31f8:	10c00017 	ldw	r3,0(r2)
    31fc:	e0bffc17 	ldw	r2,-16(fp)
    3200:	10800117 	ldw	r2,4(r2)
    3204:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    3208:	e0bffc17 	ldw	r2,-16(fp)
    320c:	10c00117 	ldw	r3,4(r2)
    3210:	e0bffc17 	ldw	r2,-16(fp)
    3214:	10800017 	ldw	r2,0(r2)
    3218:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    321c:	e0fffc17 	ldw	r3,-16(fp)
    3220:	e0bffc17 	ldw	r2,-16(fp)
    3224:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    3228:	e0fffc17 	ldw	r3,-16(fp)
    322c:	e0bffc17 	ldw	r2,-16(fp)
    3230:	18800015 	stw	r2,0(r3)
    3234:	e0bffe17 	ldw	r2,-8(fp)
    3238:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    323c:	e0bffb17 	ldw	r2,-20(fp)
    3240:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    3244:	e037883a 	mov	sp,fp
    3248:	df000017 	ldw	fp,0(sp)
    324c:	dec00104 	addi	sp,sp,4
    3250:	f800283a 	ret

00003254 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3254:	defffb04 	addi	sp,sp,-20
    3258:	dfc00415 	stw	ra,16(sp)
    325c:	df000315 	stw	fp,12(sp)
    3260:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3264:	d0a00c17 	ldw	r2,-32720(gp)
    3268:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    326c:	d0a6a917 	ldw	r2,-25948(gp)
    3270:	10800044 	addi	r2,r2,1
    3274:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3278:	00003106 	br	3340 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    327c:	e0bffe17 	ldw	r2,-8(fp)
    3280:	10800017 	ldw	r2,0(r2)
    3284:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3288:	e0bffe17 	ldw	r2,-8(fp)
    328c:	10800403 	ldbu	r2,16(r2)
    3290:	10803fcc 	andi	r2,r2,255
    3294:	1005003a 	cmpeq	r2,r2,zero
    3298:	1000051e 	bne	r2,zero,32b0 <alt_tick+0x5c>
    329c:	d0a6a917 	ldw	r2,-25948(gp)
    32a0:	1004c03a 	cmpne	r2,r2,zero
    32a4:	1000021e 	bne	r2,zero,32b0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    32a8:	e0bffe17 	ldw	r2,-8(fp)
    32ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    32b0:	e0bffe17 	ldw	r2,-8(fp)
    32b4:	10c00217 	ldw	r3,8(r2)
    32b8:	d0a6a917 	ldw	r2,-25948(gp)
    32bc:	10c01e36 	bltu	r2,r3,3338 <alt_tick+0xe4>
    32c0:	e0bffe17 	ldw	r2,-8(fp)
    32c4:	10800403 	ldbu	r2,16(r2)
    32c8:	10803fcc 	andi	r2,r2,255
    32cc:	1004c03a 	cmpne	r2,r2,zero
    32d0:	1000191e 	bne	r2,zero,3338 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    32d4:	e0bffe17 	ldw	r2,-8(fp)
    32d8:	10c00317 	ldw	r3,12(r2)
    32dc:	e0bffe17 	ldw	r2,-8(fp)
    32e0:	11000517 	ldw	r4,20(r2)
    32e4:	183ee83a 	callr	r3
    32e8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    32ec:	e0bffd17 	ldw	r2,-12(fp)
    32f0:	1004c03a 	cmpne	r2,r2,zero
    32f4:	1000031e 	bne	r2,zero,3304 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    32f8:	e13ffe17 	ldw	r4,-8(fp)
    32fc:	00031bc0 	call	31bc <alt_alarm_stop>
    3300:	00000d06 	br	3338 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    3304:	e0bffe17 	ldw	r2,-8(fp)
    3308:	10c00217 	ldw	r3,8(r2)
    330c:	e0bffd17 	ldw	r2,-12(fp)
    3310:	1887883a 	add	r3,r3,r2
    3314:	e0bffe17 	ldw	r2,-8(fp)
    3318:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    331c:	e0bffe17 	ldw	r2,-8(fp)
    3320:	10c00217 	ldw	r3,8(r2)
    3324:	d0a6a917 	ldw	r2,-25948(gp)
    3328:	1880032e 	bgeu	r3,r2,3338 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    332c:	e0fffe17 	ldw	r3,-8(fp)
    3330:	00800044 	movi	r2,1
    3334:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    3338:	e0bfff17 	ldw	r2,-4(fp)
    333c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3340:	d0e00c04 	addi	r3,gp,-32720
    3344:	e0bffe17 	ldw	r2,-8(fp)
    3348:	10ffcc1e 	bne	r2,r3,327c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    334c:	e037883a 	mov	sp,fp
    3350:	dfc00117 	ldw	ra,4(sp)
    3354:	df000017 	ldw	fp,0(sp)
    3358:	dec00204 	addi	sp,sp,8
    335c:	f800283a 	ret

00003360 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    3360:	deffff04 	addi	sp,sp,-4
    3364:	df000015 	stw	fp,0(sp)
    3368:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    336c:	000170fa 	wrctl	ienable,zero
}
    3370:	e037883a 	mov	sp,fp
    3374:	df000017 	ldw	fp,0(sp)
    3378:	dec00104 	addi	sp,sp,4
    337c:	f800283a 	ret

00003380 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    3380:	defff904 	addi	sp,sp,-28
    3384:	dfc00615 	stw	ra,24(sp)
    3388:	df000515 	stw	fp,20(sp)
    338c:	df000504 	addi	fp,sp,20
    3390:	e13ffd15 	stw	r4,-12(fp)
    3394:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    3398:	e0bffe17 	ldw	r2,-8(fp)
    339c:	10800017 	ldw	r2,0(r2)
    33a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    33a4:	e13ffd17 	ldw	r4,-12(fp)
    33a8:	00037dc0 	call	37dc <strlen>
    33ac:	10800044 	addi	r2,r2,1
    33b0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    33b4:	00000d06 	br	33ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    33b8:	e0bffc17 	ldw	r2,-16(fp)
    33bc:	11000217 	ldw	r4,8(r2)
    33c0:	e1bffb17 	ldw	r6,-20(fp)
    33c4:	e17ffd17 	ldw	r5,-12(fp)
    33c8:	00036c80 	call	36c8 <memcmp>
    33cc:	1004c03a 	cmpne	r2,r2,zero
    33d0:	1000031e 	bne	r2,zero,33e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    33d4:	e0bffc17 	ldw	r2,-16(fp)
    33d8:	e0bfff15 	stw	r2,-4(fp)
    33dc:	00000706 	br	33fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    33e0:	e0bffc17 	ldw	r2,-16(fp)
    33e4:	10800017 	ldw	r2,0(r2)
    33e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    33ec:	e0fffe17 	ldw	r3,-8(fp)
    33f0:	e0bffc17 	ldw	r2,-16(fp)
    33f4:	10fff01e 	bne	r2,r3,33b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    33f8:	e03fff15 	stw	zero,-4(fp)
    33fc:	e0bfff17 	ldw	r2,-4(fp)
}
    3400:	e037883a 	mov	sp,fp
    3404:	dfc00117 	ldw	ra,4(sp)
    3408:	df000017 	ldw	fp,0(sp)
    340c:	dec00204 	addi	sp,sp,8
    3410:	f800283a 	ret

00003414 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3414:	defffa04 	addi	sp,sp,-24
    3418:	dfc00515 	stw	ra,20(sp)
    341c:	df000415 	stw	fp,16(sp)
    3420:	df000404 	addi	fp,sp,16
    3424:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3428:	00800034 	movhi	r2,0
    342c:	10957c04 	addi	r2,r2,22000
    3430:	10800017 	ldw	r2,0(r2)
    3434:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3438:	00003306 	br	3508 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    343c:	e0bffd17 	ldw	r2,-12(fp)
    3440:	11000217 	ldw	r4,8(r2)
    3444:	00037dc0 	call	37dc <strlen>
    3448:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    344c:	e0bffd17 	ldw	r2,-12(fp)
    3450:	10c00217 	ldw	r3,8(r2)
    3454:	e0bffc17 	ldw	r2,-16(fp)
    3458:	1885883a 	add	r2,r3,r2
    345c:	10bfffc4 	addi	r2,r2,-1
    3460:	10800003 	ldbu	r2,0(r2)
    3464:	10803fcc 	andi	r2,r2,255
    3468:	1080201c 	xori	r2,r2,128
    346c:	10bfe004 	addi	r2,r2,-128
    3470:	10800bd8 	cmpnei	r2,r2,47
    3474:	1000031e 	bne	r2,zero,3484 <alt_find_file+0x70>
    {
      len -= 1;
    3478:	e0bffc17 	ldw	r2,-16(fp)
    347c:	10bfffc4 	addi	r2,r2,-1
    3480:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3484:	e0bffc17 	ldw	r2,-16(fp)
    3488:	1007883a 	mov	r3,r2
    348c:	e0bffe17 	ldw	r2,-8(fp)
    3490:	1885883a 	add	r2,r3,r2
    3494:	10800003 	ldbu	r2,0(r2)
    3498:	10803fcc 	andi	r2,r2,255
    349c:	1080201c 	xori	r2,r2,128
    34a0:	10bfe004 	addi	r2,r2,-128
    34a4:	10800be0 	cmpeqi	r2,r2,47
    34a8:	10000a1e 	bne	r2,zero,34d4 <alt_find_file+0xc0>
    34ac:	e0bffc17 	ldw	r2,-16(fp)
    34b0:	1007883a 	mov	r3,r2
    34b4:	e0bffe17 	ldw	r2,-8(fp)
    34b8:	1885883a 	add	r2,r3,r2
    34bc:	10800003 	ldbu	r2,0(r2)
    34c0:	10803fcc 	andi	r2,r2,255
    34c4:	1080201c 	xori	r2,r2,128
    34c8:	10bfe004 	addi	r2,r2,-128
    34cc:	1004c03a 	cmpne	r2,r2,zero
    34d0:	10000a1e 	bne	r2,zero,34fc <alt_find_file+0xe8>
    34d4:	e0bffd17 	ldw	r2,-12(fp)
    34d8:	11000217 	ldw	r4,8(r2)
    34dc:	e1bffc17 	ldw	r6,-16(fp)
    34e0:	e17ffe17 	ldw	r5,-8(fp)
    34e4:	00036c80 	call	36c8 <memcmp>
    34e8:	1004c03a 	cmpne	r2,r2,zero
    34ec:	1000031e 	bne	r2,zero,34fc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    34f0:	e0bffd17 	ldw	r2,-12(fp)
    34f4:	e0bfff15 	stw	r2,-4(fp)
    34f8:	00000806 	br	351c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    34fc:	e0bffd17 	ldw	r2,-12(fp)
    3500:	10800017 	ldw	r2,0(r2)
    3504:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3508:	00c00034 	movhi	r3,0
    350c:	18d57c04 	addi	r3,r3,22000
    3510:	e0bffd17 	ldw	r2,-12(fp)
    3514:	10ffc91e 	bne	r2,r3,343c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3518:	e03fff15 	stw	zero,-4(fp)
    351c:	e0bfff17 	ldw	r2,-4(fp)
}
    3520:	e037883a 	mov	sp,fp
    3524:	dfc00117 	ldw	ra,4(sp)
    3528:	df000017 	ldw	fp,0(sp)
    352c:	dec00204 	addi	sp,sp,8
    3530:	f800283a 	ret

00003534 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3534:	defffc04 	addi	sp,sp,-16
    3538:	df000315 	stw	fp,12(sp)
    353c:	df000304 	addi	fp,sp,12
    3540:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    3544:	00bffa04 	movi	r2,-24
    3548:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    354c:	e03ffe15 	stw	zero,-8(fp)
    3550:	00001e06 	br	35cc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    3554:	e0bffe17 	ldw	r2,-8(fp)
    3558:	00c00034 	movhi	r3,0
    355c:	18d51704 	addi	r3,r3,21596
    3560:	10800324 	muli	r2,r2,12
    3564:	10c5883a 	add	r2,r2,r3
    3568:	10800017 	ldw	r2,0(r2)
    356c:	1004c03a 	cmpne	r2,r2,zero
    3570:	1000131e 	bne	r2,zero,35c0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    3574:	e0bffe17 	ldw	r2,-8(fp)
    3578:	00c00034 	movhi	r3,0
    357c:	18d51704 	addi	r3,r3,21596
    3580:	10800324 	muli	r2,r2,12
    3584:	10c7883a 	add	r3,r2,r3
    3588:	e0bfff17 	ldw	r2,-4(fp)
    358c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    3590:	00800034 	movhi	r2,0
    3594:	10958004 	addi	r2,r2,22016
    3598:	10c00017 	ldw	r3,0(r2)
    359c:	e0bffe17 	ldw	r2,-8(fp)
    35a0:	1880040e 	bge	r3,r2,35b4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    35a4:	00c00034 	movhi	r3,0
    35a8:	18d58004 	addi	r3,r3,22016
    35ac:	e0bffe17 	ldw	r2,-8(fp)
    35b0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    35b4:	e0bffe17 	ldw	r2,-8(fp)
    35b8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    35bc:	00000606 	br	35d8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    35c0:	e0bffe17 	ldw	r2,-8(fp)
    35c4:	10800044 	addi	r2,r2,1
    35c8:	e0bffe15 	stw	r2,-8(fp)
    35cc:	e0bffe17 	ldw	r2,-8(fp)
    35d0:	10800810 	cmplti	r2,r2,32
    35d4:	103fdf1e 	bne	r2,zero,3554 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    35d8:	e0bffd17 	ldw	r2,-12(fp)
}
    35dc:	e037883a 	mov	sp,fp
    35e0:	df000017 	ldw	fp,0(sp)
    35e4:	dec00104 	addi	sp,sp,4
    35e8:	f800283a 	ret

000035ec <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    35ec:	defffb04 	addi	sp,sp,-20
    35f0:	df000415 	stw	fp,16(sp)
    35f4:	df000404 	addi	fp,sp,16
    35f8:	e13ffe15 	stw	r4,-8(fp)
    35fc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    3600:	e0bfff17 	ldw	r2,-4(fp)
    3604:	10840070 	cmpltui	r2,r2,4097
    3608:	1000021e 	bne	r2,zero,3614 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    360c:	00840004 	movi	r2,4096
    3610:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    3614:	e0fffe17 	ldw	r3,-8(fp)
    3618:	e0bfff17 	ldw	r2,-4(fp)
    361c:	1885883a 	add	r2,r3,r2
    3620:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3624:	e0bffe17 	ldw	r2,-8(fp)
    3628:	e0bffd15 	stw	r2,-12(fp)
    362c:	00000506 	br	3644 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    3630:	e0bffd17 	ldw	r2,-12(fp)
    3634:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3638:	e0bffd17 	ldw	r2,-12(fp)
    363c:	10800804 	addi	r2,r2,32
    3640:	e0bffd15 	stw	r2,-12(fp)
    3644:	e0fffd17 	ldw	r3,-12(fp)
    3648:	e0bffc17 	ldw	r2,-16(fp)
    364c:	18bff836 	bltu	r3,r2,3630 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3650:	e0bffe17 	ldw	r2,-8(fp)
    3654:	108007cc 	andi	r2,r2,31
    3658:	1005003a 	cmpeq	r2,r2,zero
    365c:	1000021e 	bne	r2,zero,3668 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    3660:	e0bffd17 	ldw	r2,-12(fp)
    3664:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3668:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    366c:	e037883a 	mov	sp,fp
    3670:	df000017 	ldw	fp,0(sp)
    3674:	dec00104 	addi	sp,sp,4
    3678:	f800283a 	ret

0000367c <atexit>:
    367c:	200b883a 	mov	r5,r4
    3680:	000d883a 	mov	r6,zero
    3684:	0009883a 	mov	r4,zero
    3688:	000f883a 	mov	r7,zero
    368c:	00038501 	jmpi	3850 <__register_exitproc>

00003690 <exit>:
    3690:	defffe04 	addi	sp,sp,-8
    3694:	000b883a 	mov	r5,zero
    3698:	dc000015 	stw	r16,0(sp)
    369c:	dfc00115 	stw	ra,4(sp)
    36a0:	2021883a 	mov	r16,r4
    36a4:	00039880 	call	3988 <__call_exitprocs>
    36a8:	00800034 	movhi	r2,0
    36ac:	10957804 	addi	r2,r2,21984
    36b0:	11000017 	ldw	r4,0(r2)
    36b4:	20800f17 	ldw	r2,60(r4)
    36b8:	10000126 	beq	r2,zero,36c0 <exit+0x30>
    36bc:	103ee83a 	callr	r2
    36c0:	8009883a 	mov	r4,r16
    36c4:	0003b780 	call	3b78 <_exit>

000036c8 <memcmp>:
    36c8:	00c000c4 	movi	r3,3
    36cc:	1980032e 	bgeu	r3,r6,36dc <memcmp+0x14>
    36d0:	2144b03a 	or	r2,r4,r5
    36d4:	10c4703a 	and	r2,r2,r3
    36d8:	10000f26 	beq	r2,zero,3718 <memcmp+0x50>
    36dc:	31ffffc4 	addi	r7,r6,-1
    36e0:	3000061e 	bne	r6,zero,36fc <memcmp+0x34>
    36e4:	00000a06 	br	3710 <memcmp+0x48>
    36e8:	39ffffc4 	addi	r7,r7,-1
    36ec:	00bfffc4 	movi	r2,-1
    36f0:	21000044 	addi	r4,r4,1
    36f4:	29400044 	addi	r5,r5,1
    36f8:	38800526 	beq	r7,r2,3710 <memcmp+0x48>
    36fc:	20c00003 	ldbu	r3,0(r4)
    3700:	28800003 	ldbu	r2,0(r5)
    3704:	18bff826 	beq	r3,r2,36e8 <memcmp+0x20>
    3708:	1885c83a 	sub	r2,r3,r2
    370c:	f800283a 	ret
    3710:	0005883a 	mov	r2,zero
    3714:	f800283a 	ret
    3718:	180f883a 	mov	r7,r3
    371c:	20c00017 	ldw	r3,0(r4)
    3720:	28800017 	ldw	r2,0(r5)
    3724:	18bfed1e 	bne	r3,r2,36dc <memcmp+0x14>
    3728:	31bfff04 	addi	r6,r6,-4
    372c:	21000104 	addi	r4,r4,4
    3730:	29400104 	addi	r5,r5,4
    3734:	39bff936 	bltu	r7,r6,371c <memcmp+0x54>
    3738:	003fe806 	br	36dc <memcmp+0x14>

0000373c <memcpy>:
    373c:	01c003c4 	movi	r7,15
    3740:	2007883a 	mov	r3,r4
    3744:	3980032e 	bgeu	r7,r6,3754 <memcpy+0x18>
    3748:	2904b03a 	or	r2,r5,r4
    374c:	108000cc 	andi	r2,r2,3
    3750:	10000926 	beq	r2,zero,3778 <memcpy+0x3c>
    3754:	30000626 	beq	r6,zero,3770 <memcpy+0x34>
    3758:	30cd883a 	add	r6,r6,r3
    375c:	28800003 	ldbu	r2,0(r5)
    3760:	29400044 	addi	r5,r5,1
    3764:	18800005 	stb	r2,0(r3)
    3768:	18c00044 	addi	r3,r3,1
    376c:	30fffb1e 	bne	r6,r3,375c <memcpy+0x20>
    3770:	2005883a 	mov	r2,r4
    3774:	f800283a 	ret
    3778:	3811883a 	mov	r8,r7
    377c:	200f883a 	mov	r7,r4
    3780:	28c00017 	ldw	r3,0(r5)
    3784:	31bffc04 	addi	r6,r6,-16
    3788:	38c00015 	stw	r3,0(r7)
    378c:	28800117 	ldw	r2,4(r5)
    3790:	38800115 	stw	r2,4(r7)
    3794:	28c00217 	ldw	r3,8(r5)
    3798:	38c00215 	stw	r3,8(r7)
    379c:	28800317 	ldw	r2,12(r5)
    37a0:	29400404 	addi	r5,r5,16
    37a4:	38800315 	stw	r2,12(r7)
    37a8:	39c00404 	addi	r7,r7,16
    37ac:	41bff436 	bltu	r8,r6,3780 <memcpy+0x44>
    37b0:	008000c4 	movi	r2,3
    37b4:	1180072e 	bgeu	r2,r6,37d4 <memcpy+0x98>
    37b8:	1007883a 	mov	r3,r2
    37bc:	28800017 	ldw	r2,0(r5)
    37c0:	31bfff04 	addi	r6,r6,-4
    37c4:	29400104 	addi	r5,r5,4
    37c8:	38800015 	stw	r2,0(r7)
    37cc:	39c00104 	addi	r7,r7,4
    37d0:	19bffa36 	bltu	r3,r6,37bc <memcpy+0x80>
    37d4:	3807883a 	mov	r3,r7
    37d8:	003fde06 	br	3754 <memcpy+0x18>

000037dc <strlen>:
    37dc:	208000cc 	andi	r2,r4,3
    37e0:	2011883a 	mov	r8,r4
    37e4:	1000161e 	bne	r2,zero,3840 <strlen+0x64>
    37e8:	20c00017 	ldw	r3,0(r4)
    37ec:	017fbff4 	movhi	r5,65279
    37f0:	297fbfc4 	addi	r5,r5,-257
    37f4:	01e02074 	movhi	r7,32897
    37f8:	39e02004 	addi	r7,r7,-32640
    37fc:	1945883a 	add	r2,r3,r5
    3800:	11c4703a 	and	r2,r2,r7
    3804:	00c6303a 	nor	r3,zero,r3
    3808:	1886703a 	and	r3,r3,r2
    380c:	18000c1e 	bne	r3,zero,3840 <strlen+0x64>
    3810:	280d883a 	mov	r6,r5
    3814:	380b883a 	mov	r5,r7
    3818:	21000104 	addi	r4,r4,4
    381c:	20800017 	ldw	r2,0(r4)
    3820:	1187883a 	add	r3,r2,r6
    3824:	1946703a 	and	r3,r3,r5
    3828:	0084303a 	nor	r2,zero,r2
    382c:	10c4703a 	and	r2,r2,r3
    3830:	103ff926 	beq	r2,zero,3818 <strlen+0x3c>
    3834:	20800007 	ldb	r2,0(r4)
    3838:	10000326 	beq	r2,zero,3848 <strlen+0x6c>
    383c:	21000044 	addi	r4,r4,1
    3840:	20800007 	ldb	r2,0(r4)
    3844:	103ffd1e 	bne	r2,zero,383c <strlen+0x60>
    3848:	2205c83a 	sub	r2,r4,r8
    384c:	f800283a 	ret

00003850 <__register_exitproc>:
    3850:	defffa04 	addi	sp,sp,-24
    3854:	00800034 	movhi	r2,0
    3858:	10957804 	addi	r2,r2,21984
    385c:	dc000015 	stw	r16,0(sp)
    3860:	14000017 	ldw	r16,0(r2)
    3864:	dd000415 	stw	r20,16(sp)
    3868:	2829883a 	mov	r20,r5
    386c:	81405217 	ldw	r5,328(r16)
    3870:	dcc00315 	stw	r19,12(sp)
    3874:	dc800215 	stw	r18,8(sp)
    3878:	dc400115 	stw	r17,4(sp)
    387c:	dfc00515 	stw	ra,20(sp)
    3880:	2023883a 	mov	r17,r4
    3884:	3027883a 	mov	r19,r6
    3888:	3825883a 	mov	r18,r7
    388c:	28002526 	beq	r5,zero,3924 <__register_exitproc+0xd4>
    3890:	29000117 	ldw	r4,4(r5)
    3894:	008007c4 	movi	r2,31
    3898:	11002716 	blt	r2,r4,3938 <__register_exitproc+0xe8>
    389c:	8800101e 	bne	r17,zero,38e0 <__register_exitproc+0x90>
    38a0:	2105883a 	add	r2,r4,r4
    38a4:	1085883a 	add	r2,r2,r2
    38a8:	20c00044 	addi	r3,r4,1
    38ac:	1145883a 	add	r2,r2,r5
    38b0:	0009883a 	mov	r4,zero
    38b4:	15000215 	stw	r20,8(r2)
    38b8:	28c00115 	stw	r3,4(r5)
    38bc:	2005883a 	mov	r2,r4
    38c0:	dfc00517 	ldw	ra,20(sp)
    38c4:	dd000417 	ldw	r20,16(sp)
    38c8:	dcc00317 	ldw	r19,12(sp)
    38cc:	dc800217 	ldw	r18,8(sp)
    38d0:	dc400117 	ldw	r17,4(sp)
    38d4:	dc000017 	ldw	r16,0(sp)
    38d8:	dec00604 	addi	sp,sp,24
    38dc:	f800283a 	ret
    38e0:	29802204 	addi	r6,r5,136
    38e4:	00800044 	movi	r2,1
    38e8:	110e983a 	sll	r7,r2,r4
    38ec:	30c04017 	ldw	r3,256(r6)
    38f0:	2105883a 	add	r2,r4,r4
    38f4:	1085883a 	add	r2,r2,r2
    38f8:	1185883a 	add	r2,r2,r6
    38fc:	19c6b03a 	or	r3,r3,r7
    3900:	14802015 	stw	r18,128(r2)
    3904:	14c00015 	stw	r19,0(r2)
    3908:	00800084 	movi	r2,2
    390c:	30c04015 	stw	r3,256(r6)
    3910:	88bfe31e 	bne	r17,r2,38a0 <__register_exitproc+0x50>
    3914:	30804117 	ldw	r2,260(r6)
    3918:	11c4b03a 	or	r2,r2,r7
    391c:	30804115 	stw	r2,260(r6)
    3920:	003fdf06 	br	38a0 <__register_exitproc+0x50>
    3924:	00800034 	movhi	r2,0
    3928:	109c6b04 	addi	r2,r2,29100
    392c:	100b883a 	mov	r5,r2
    3930:	80805215 	stw	r2,328(r16)
    3934:	003fd606 	br	3890 <__register_exitproc+0x40>
    3938:	00800034 	movhi	r2,0
    393c:	10800004 	addi	r2,r2,0
    3940:	1000021e 	bne	r2,zero,394c <__register_exitproc+0xfc>
    3944:	013fffc4 	movi	r4,-1
    3948:	003fdc06 	br	38bc <__register_exitproc+0x6c>
    394c:	01006404 	movi	r4,400
    3950:	103ee83a 	callr	r2
    3954:	1007883a 	mov	r3,r2
    3958:	103ffa26 	beq	r2,zero,3944 <__register_exitproc+0xf4>
    395c:	80805217 	ldw	r2,328(r16)
    3960:	180b883a 	mov	r5,r3
    3964:	18000115 	stw	zero,4(r3)
    3968:	18800015 	stw	r2,0(r3)
    396c:	80c05215 	stw	r3,328(r16)
    3970:	18006215 	stw	zero,392(r3)
    3974:	18006315 	stw	zero,396(r3)
    3978:	0009883a 	mov	r4,zero
    397c:	883fc826 	beq	r17,zero,38a0 <__register_exitproc+0x50>
    3980:	003fd706 	br	38e0 <__register_exitproc+0x90>

00003984 <register_fini>:
    3984:	f800283a 	ret

00003988 <__call_exitprocs>:
    3988:	00800034 	movhi	r2,0
    398c:	10957804 	addi	r2,r2,21984
    3990:	10800017 	ldw	r2,0(r2)
    3994:	defff304 	addi	sp,sp,-52
    3998:	df000b15 	stw	fp,44(sp)
    399c:	d8800115 	stw	r2,4(sp)
    39a0:	00800034 	movhi	r2,0
    39a4:	10800004 	addi	r2,r2,0
    39a8:	1005003a 	cmpeq	r2,r2,zero
    39ac:	d8800215 	stw	r2,8(sp)
    39b0:	d8800117 	ldw	r2,4(sp)
    39b4:	dd400815 	stw	r21,32(sp)
    39b8:	dd000715 	stw	r20,28(sp)
    39bc:	10805204 	addi	r2,r2,328
    39c0:	dfc00c15 	stw	ra,48(sp)
    39c4:	ddc00a15 	stw	r23,40(sp)
    39c8:	dd800915 	stw	r22,36(sp)
    39cc:	dcc00615 	stw	r19,24(sp)
    39d0:	dc800515 	stw	r18,20(sp)
    39d4:	dc400415 	stw	r17,16(sp)
    39d8:	dc000315 	stw	r16,12(sp)
    39dc:	282b883a 	mov	r21,r5
    39e0:	2039883a 	mov	fp,r4
    39e4:	d8800015 	stw	r2,0(sp)
    39e8:	2829003a 	cmpeq	r20,r5,zero
    39ec:	d8800117 	ldw	r2,4(sp)
    39f0:	14405217 	ldw	r17,328(r2)
    39f4:	88001026 	beq	r17,zero,3a38 <__call_exitprocs+0xb0>
    39f8:	ddc00017 	ldw	r23,0(sp)
    39fc:	88800117 	ldw	r2,4(r17)
    3a00:	8c802204 	addi	r18,r17,136
    3a04:	143fffc4 	addi	r16,r2,-1
    3a08:	80000916 	blt	r16,zero,3a30 <__call_exitprocs+0xa8>
    3a0c:	05bfffc4 	movi	r22,-1
    3a10:	a000151e 	bne	r20,zero,3a68 <__call_exitprocs+0xe0>
    3a14:	8409883a 	add	r4,r16,r16
    3a18:	2105883a 	add	r2,r4,r4
    3a1c:	1485883a 	add	r2,r2,r18
    3a20:	10c02017 	ldw	r3,128(r2)
    3a24:	a8c01126 	beq	r21,r3,3a6c <__call_exitprocs+0xe4>
    3a28:	843fffc4 	addi	r16,r16,-1
    3a2c:	85bff81e 	bne	r16,r22,3a10 <__call_exitprocs+0x88>
    3a30:	d8800217 	ldw	r2,8(sp)
    3a34:	10003126 	beq	r2,zero,3afc <__call_exitprocs+0x174>
    3a38:	dfc00c17 	ldw	ra,48(sp)
    3a3c:	df000b17 	ldw	fp,44(sp)
    3a40:	ddc00a17 	ldw	r23,40(sp)
    3a44:	dd800917 	ldw	r22,36(sp)
    3a48:	dd400817 	ldw	r21,32(sp)
    3a4c:	dd000717 	ldw	r20,28(sp)
    3a50:	dcc00617 	ldw	r19,24(sp)
    3a54:	dc800517 	ldw	r18,20(sp)
    3a58:	dc400417 	ldw	r17,16(sp)
    3a5c:	dc000317 	ldw	r16,12(sp)
    3a60:	dec00d04 	addi	sp,sp,52
    3a64:	f800283a 	ret
    3a68:	8409883a 	add	r4,r16,r16
    3a6c:	88c00117 	ldw	r3,4(r17)
    3a70:	2105883a 	add	r2,r4,r4
    3a74:	1445883a 	add	r2,r2,r17
    3a78:	18ffffc4 	addi	r3,r3,-1
    3a7c:	11800217 	ldw	r6,8(r2)
    3a80:	1c001526 	beq	r3,r16,3ad8 <__call_exitprocs+0x150>
    3a84:	10000215 	stw	zero,8(r2)
    3a88:	303fe726 	beq	r6,zero,3a28 <__call_exitprocs+0xa0>
    3a8c:	00c00044 	movi	r3,1
    3a90:	1c06983a 	sll	r3,r3,r16
    3a94:	90804017 	ldw	r2,256(r18)
    3a98:	8cc00117 	ldw	r19,4(r17)
    3a9c:	1884703a 	and	r2,r3,r2
    3aa0:	10001426 	beq	r2,zero,3af4 <__call_exitprocs+0x16c>
    3aa4:	90804117 	ldw	r2,260(r18)
    3aa8:	1884703a 	and	r2,r3,r2
    3aac:	10000c1e 	bne	r2,zero,3ae0 <__call_exitprocs+0x158>
    3ab0:	2105883a 	add	r2,r4,r4
    3ab4:	1485883a 	add	r2,r2,r18
    3ab8:	11400017 	ldw	r5,0(r2)
    3abc:	e009883a 	mov	r4,fp
    3ac0:	303ee83a 	callr	r6
    3ac4:	88800117 	ldw	r2,4(r17)
    3ac8:	98bfc81e 	bne	r19,r2,39ec <__call_exitprocs+0x64>
    3acc:	b8800017 	ldw	r2,0(r23)
    3ad0:	147fd526 	beq	r2,r17,3a28 <__call_exitprocs+0xa0>
    3ad4:	003fc506 	br	39ec <__call_exitprocs+0x64>
    3ad8:	8c000115 	stw	r16,4(r17)
    3adc:	003fea06 	br	3a88 <__call_exitprocs+0x100>
    3ae0:	2105883a 	add	r2,r4,r4
    3ae4:	1485883a 	add	r2,r2,r18
    3ae8:	11000017 	ldw	r4,0(r2)
    3aec:	303ee83a 	callr	r6
    3af0:	003ff406 	br	3ac4 <__call_exitprocs+0x13c>
    3af4:	303ee83a 	callr	r6
    3af8:	003ff206 	br	3ac4 <__call_exitprocs+0x13c>
    3afc:	88800117 	ldw	r2,4(r17)
    3b00:	1000081e 	bne	r2,zero,3b24 <__call_exitprocs+0x19c>
    3b04:	89000017 	ldw	r4,0(r17)
    3b08:	20000726 	beq	r4,zero,3b28 <__call_exitprocs+0x1a0>
    3b0c:	b9000015 	stw	r4,0(r23)
    3b10:	8809883a 	mov	r4,r17
    3b14:	00000000 	call	0 <__alt_mem_sdram>
    3b18:	bc400017 	ldw	r17,0(r23)
    3b1c:	883fb71e 	bne	r17,zero,39fc <__call_exitprocs+0x74>
    3b20:	003fc506 	br	3a38 <__call_exitprocs+0xb0>
    3b24:	89000017 	ldw	r4,0(r17)
    3b28:	882f883a 	mov	r23,r17
    3b2c:	2023883a 	mov	r17,r4
    3b30:	883fb21e 	bne	r17,zero,39fc <__call_exitprocs+0x74>
    3b34:	003fc006 	br	3a38 <__call_exitprocs+0xb0>

00003b38 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    3b38:	defffd04 	addi	sp,sp,-12
    3b3c:	df000215 	stw	fp,8(sp)
    3b40:	df000204 	addi	fp,sp,8
    3b44:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    3b48:	e0bfff17 	ldw	r2,-4(fp)
    3b4c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    3b50:	e0bffe17 	ldw	r2,-8(fp)
    3b54:	1005003a 	cmpeq	r2,r2,zero
    3b58:	1000021e 	bne	r2,zero,3b64 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    3b5c:	002af070 	cmpltui	zero,zero,43969
    3b60:	00000106 	br	3b68 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    3b64:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    3b68:	e037883a 	mov	sp,fp
    3b6c:	df000017 	ldw	fp,0(sp)
    3b70:	dec00104 	addi	sp,sp,4
    3b74:	f800283a 	ret

00003b78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    3b78:	defffd04 	addi	sp,sp,-12
    3b7c:	dfc00215 	stw	ra,8(sp)
    3b80:	df000115 	stw	fp,4(sp)
    3b84:	df000104 	addi	fp,sp,4
    3b88:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    3b8c:	e13fff17 	ldw	r4,-4(fp)
    3b90:	0003b380 	call	3b38 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    3b94:	003fff06 	br	3b94 <_exit+0x1c>
    3b98:	00003984 	movi	zero,230
